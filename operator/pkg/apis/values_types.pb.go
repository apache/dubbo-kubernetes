// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.28.3
// source: values_types.proto

package apis

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Global Configuration for Dubbo components.
type GlobalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the default namespace.
	DubboNamespace string `protobuf:"bytes,1,opt,name=dubboNamespace,proto3" json:"dubboNamespace,omitempty"`
}

func (x *GlobalConfig) Reset() {
	*x = GlobalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalConfig) ProtoMessage() {}

func (x *GlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalConfig.ProtoReflect.Descriptor instead.
func (*GlobalConfig) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{0}
}

func (x *GlobalConfig) GetDubboNamespace() string {
	if x != nil {
		return x.DubboNamespace
	}
	return ""
}

type BaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For dubboctl usage to disable dubbo config crds in base
	EnableDubboConfigCRDs *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enableDubboConfigCRDs,proto3" json:"enableDubboConfigCRDs,omitempty"`
}

func (x *BaseConfig) Reset() {
	*x = BaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseConfig) ProtoMessage() {}

func (x *BaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseConfig.ProtoReflect.Descriptor instead.
func (*BaseConfig) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{1}
}

func (x *BaseConfig) GetEnableDubboConfigCRDs() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableDubboConfigCRDs
	}
	return nil
}

type ZookeeperConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataLogDir              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=dataLogDir,proto3" json:"dataLogDir,omitempty"`
	TickTime                *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=tickTime,proto3" json:"tickTime,omitempty"`
	InitLimit               *wrapperspb.Int64Value  `protobuf:"bytes,3,opt,name=initLimit,proto3" json:"initLimit,omitempty"`
	SyncLimit               *wrapperspb.Int64Value  `protobuf:"bytes,4,opt,name=syncLimit,proto3" json:"syncLimit,omitempty"`
	PreAllocSize            *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=preAllocSize,proto3" json:"preAllocSize,omitempty"`
	SnapCount               *wrapperspb.Int64Value  `protobuf:"bytes,6,opt,name=snapCount,proto3" json:"snapCount,omitempty"`
	FourlwCommandsWhitelist *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=fourlwCommandsWhitelist,proto3" json:"fourlwCommandsWhitelist,omitempty"`
	ListenOnAllIPs          *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=listenOnAllIPs,proto3" json:"listenOnAllIPs,omitempty"`
	Autopurge               *ZookeeperAutopurge     `protobuf:"bytes,9,opt,name=autopurge,proto3" json:"autopurge,omitempty"`
	MaxClientCnxns          *wrapperspb.Int64Value  `protobuf:"bytes,10,opt,name=maxClientCnxns,proto3" json:"maxClientCnxns,omitempty"`
	MaxSessionTimeout       *wrapperspb.Int64Value  `protobuf:"bytes,11,opt,name=maxSessionTimeout,proto3" json:"maxSessionTimeout,omitempty"`
	HeapSize                *wrapperspb.Int64Value  `protobuf:"bytes,12,opt,name=heapSize,proto3" json:"heapSize,omitempty"`
	LogLevel                *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
	Auth                    *ZookeeperAuth          `protobuf:"bytes,14,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *ZookeeperConfig) Reset() {
	*x = ZookeeperConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZookeeperConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZookeeperConfig) ProtoMessage() {}

func (x *ZookeeperConfig) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZookeeperConfig.ProtoReflect.Descriptor instead.
func (*ZookeeperConfig) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{2}
}

func (x *ZookeeperConfig) GetDataLogDir() *wrapperspb.StringValue {
	if x != nil {
		return x.DataLogDir
	}
	return nil
}

func (x *ZookeeperConfig) GetTickTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.TickTime
	}
	return nil
}

func (x *ZookeeperConfig) GetInitLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.InitLimit
	}
	return nil
}

func (x *ZookeeperConfig) GetSyncLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.SyncLimit
	}
	return nil
}

func (x *ZookeeperConfig) GetPreAllocSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.PreAllocSize
	}
	return nil
}

func (x *ZookeeperConfig) GetSnapCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.SnapCount
	}
	return nil
}

func (x *ZookeeperConfig) GetFourlwCommandsWhitelist() *wrapperspb.StringValue {
	if x != nil {
		return x.FourlwCommandsWhitelist
	}
	return nil
}

func (x *ZookeeperConfig) GetListenOnAllIPs() *wrapperspb.BoolValue {
	if x != nil {
		return x.ListenOnAllIPs
	}
	return nil
}

func (x *ZookeeperConfig) GetAutopurge() *ZookeeperAutopurge {
	if x != nil {
		return x.Autopurge
	}
	return nil
}

func (x *ZookeeperConfig) GetMaxClientCnxns() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxClientCnxns
	}
	return nil
}

func (x *ZookeeperConfig) GetMaxSessionTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSessionTimeout
	}
	return nil
}

func (x *ZookeeperConfig) GetHeapSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.HeapSize
	}
	return nil
}

func (x *ZookeeperConfig) GetLogLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.LogLevel
	}
	return nil
}

func (x *ZookeeperConfig) GetAuth() *ZookeeperAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type ZookeeperAutopurge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapRetainCount *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=snapRetainCount,proto3" json:"snapRetainCount,omitempty"`
	PurgeInterval   *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=purgeInterval,proto3" json:"purgeInterval,omitempty"`
}

func (x *ZookeeperAutopurge) Reset() {
	*x = ZookeeperAutopurge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZookeeperAutopurge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZookeeperAutopurge) ProtoMessage() {}

func (x *ZookeeperAutopurge) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZookeeperAutopurge.ProtoReflect.Descriptor instead.
func (*ZookeeperAutopurge) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{3}
}

func (x *ZookeeperAutopurge) GetSnapRetainCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.SnapRetainCount
	}
	return nil
}

func (x *ZookeeperAutopurge) GetPurgeInterval() *wrapperspb.Int64Value {
	if x != nil {
		return x.PurgeInterval
	}
	return nil
}

type ZookeeperAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client *ZookeeperAuthClientConfig `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Quorum *ZookeeperAuthQuorumConfig `protobuf:"bytes,2,opt,name=quorum,proto3" json:"quorum,omitempty"`
}

func (x *ZookeeperAuth) Reset() {
	*x = ZookeeperAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZookeeperAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZookeeperAuth) ProtoMessage() {}

func (x *ZookeeperAuth) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZookeeperAuth.ProtoReflect.Descriptor instead.
func (*ZookeeperAuth) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{4}
}

func (x *ZookeeperAuth) GetClient() *ZookeeperAuthClientConfig {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *ZookeeperAuth) GetQuorum() *ZookeeperAuthQuorumConfig {
	if x != nil {
		return x.Quorum
	}
	return nil
}

type ZookeeperAuthClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClientUser      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=clientUser,proto3" json:"clientUser,omitempty"`
	ClientPassword  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=clientPassword,proto3" json:"clientPassword,omitempty"`
	ServerUsers     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=serverUsers,proto3" json:"serverUsers,omitempty"`
	ServerPasswords *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=serverPasswords,proto3" json:"serverPasswords,omitempty"`
	ExistingSecret  *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=existingSecret,proto3" json:"existingSecret,omitempty"`
}

func (x *ZookeeperAuthClientConfig) Reset() {
	*x = ZookeeperAuthClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZookeeperAuthClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZookeeperAuthClientConfig) ProtoMessage() {}

func (x *ZookeeperAuthClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZookeeperAuthClientConfig.ProtoReflect.Descriptor instead.
func (*ZookeeperAuthClientConfig) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{5}
}

func (x *ZookeeperAuthClientConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *ZookeeperAuthClientConfig) GetClientUser() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientUser
	}
	return nil
}

func (x *ZookeeperAuthClientConfig) GetClientPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientPassword
	}
	return nil
}

func (x *ZookeeperAuthClientConfig) GetServerUsers() *wrapperspb.StringValue {
	if x != nil {
		return x.ServerUsers
	}
	return nil
}

func (x *ZookeeperAuthClientConfig) GetServerPasswords() *wrapperspb.StringValue {
	if x != nil {
		return x.ServerPasswords
	}
	return nil
}

func (x *ZookeeperAuthClientConfig) GetExistingSecret() *wrapperspb.StringValue {
	if x != nil {
		return x.ExistingSecret
	}
	return nil
}

type ZookeeperAuthQuorumConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	LearnerUser     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=learnerUser,proto3" json:"learnerUser,omitempty"`
	LearnerPassword *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=learnerPassword,proto3" json:"learnerPassword,omitempty"`
	ServerUsers     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=serverUsers,proto3" json:"serverUsers,omitempty"`
	ServerPasswords *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=serverPasswords,proto3" json:"serverPasswords,omitempty"`
	ExistingSecret  *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=existingSecret,proto3" json:"existingSecret,omitempty"`
}

func (x *ZookeeperAuthQuorumConfig) Reset() {
	*x = ZookeeperAuthQuorumConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZookeeperAuthQuorumConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZookeeperAuthQuorumConfig) ProtoMessage() {}

func (x *ZookeeperAuthQuorumConfig) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZookeeperAuthQuorumConfig.ProtoReflect.Descriptor instead.
func (*ZookeeperAuthQuorumConfig) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{6}
}

func (x *ZookeeperAuthQuorumConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *ZookeeperAuthQuorumConfig) GetLearnerUser() *wrapperspb.StringValue {
	if x != nil {
		return x.LearnerUser
	}
	return nil
}

func (x *ZookeeperAuthQuorumConfig) GetLearnerPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.LearnerPassword
	}
	return nil
}

func (x *ZookeeperAuthQuorumConfig) GetServerUsers() *wrapperspb.StringValue {
	if x != nil {
		return x.ServerUsers
	}
	return nil
}

func (x *ZookeeperAuthQuorumConfig) GetServerPasswords() *wrapperspb.StringValue {
	if x != nil {
		return x.ServerPasswords
	}
	return nil
}

func (x *ZookeeperAuthQuorumConfig) GetExistingSecret() *wrapperspb.StringValue {
	if x != nil {
		return x.ExistingSecret
	}
	return nil
}

type NacosConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode           *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Storage        *NacosStorage           `protobuf:"bytes,2,opt,name=storage,proto3" json:"storage,omitempty"`
	Plugin         *NacosPlugin            `protobuf:"bytes,3,opt,name=plugin,proto3" json:"plugin,omitempty"`
	Preferhostmode string                  `protobuf:"bytes,4,opt,name=preferhostmode,proto3" json:"preferhostmode,omitempty"`
}

func (x *NacosConfig) Reset() {
	*x = NacosConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NacosConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NacosConfig) ProtoMessage() {}

func (x *NacosConfig) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NacosConfig.ProtoReflect.Descriptor instead.
func (*NacosConfig) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{7}
}

func (x *NacosConfig) GetMode() *wrapperspb.StringValue {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *NacosConfig) GetStorage() *NacosStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *NacosConfig) GetPlugin() *NacosPlugin {
	if x != nil {
		return x.Plugin
	}
	return nil
}

func (x *NacosConfig) GetPreferhostmode() string {
	if x != nil {
		return x.Preferhostmode
	}
	return ""
}

type NacosStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Db   *NacosDB `protobuf:"bytes,2,opt,name=db,proto3" json:"db,omitempty"`
}

func (x *NacosStorage) Reset() {
	*x = NacosStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NacosStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NacosStorage) ProtoMessage() {}

func (x *NacosStorage) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NacosStorage.ProtoReflect.Descriptor instead.
func (*NacosStorage) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{8}
}

func (x *NacosStorage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NacosStorage) GetDb() *NacosDB {
	if x != nil {
		return x.Db
	}
	return nil
}

type NacosDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Port     int64  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Param    string `protobuf:"bytes,6,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *NacosDB) Reset() {
	*x = NacosDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NacosDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NacosDB) ProtoMessage() {}

func (x *NacosDB) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NacosDB.ProtoReflect.Descriptor instead.
func (*NacosDB) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{9}
}

func (x *NacosDB) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *NacosDB) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NacosDB) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NacosDB) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NacosDB) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *NacosDB) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

type NacosPlugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *NacosPlugin) Reset() {
	*x = NacosPlugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NacosPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NacosPlugin) ProtoMessage() {}

func (x *NacosPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NacosPlugin.ProtoReflect.Descriptor instead.
func (*NacosPlugin) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{10}
}

func (x *NacosPlugin) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type Values struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Global configuration for dubbo components.
	Global *GlobalConfig `protobuf:"bytes,1,opt,name=global,proto3" json:"global,omitempty"`
	// Configuration for the base component.
	Base *BaseConfig `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	// Specifies which installation configuration profile to apply.
	Profile string `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	// Configuration for the zookeeper component.
	Zookeeper *ZookeeperConfig `protobuf:"bytes,4,opt,name=zookeeper,proto3" json:"zookeeper,omitempty"`
	// Configuration for the nacos component.
	Nacos *NacosConfig `protobuf:"bytes,5,opt,name=nacos,proto3" json:"nacos,omitempty"`
}

func (x *Values) Reset() {
	*x = Values{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Values) ProtoMessage() {}

func (x *Values) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Values.ProtoReflect.Descriptor instead.
func (*Values) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{11}
}

func (x *Values) GetGlobal() *GlobalConfig {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *Values) GetBase() *BaseConfig {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Values) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *Values) GetZookeeper() *ZookeeperConfig {
	if x != nil {
		return x.Zookeeper
	}
	return nil
}

func (x *Values) GetNacos() *NacosConfig {
	if x != nil {
		return x.Nacos
	}
	return nil
}

// IntOrString is a type that can hold an int32 or a string.  When used in
// JSON or YAML marshalling and unmarshalling, it produces or consumes the
// inner type.  This allows you to have, for example, a JSON field that can
// accept a name or number.
// TODO: Rename to Int32OrString
//
// +protobuf=true
// +protobuf.options.(gogoproto.goproto_stringer)=false
// +k8s:openapi-gen=true
type IntOrString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int64                   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	IntVal *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=intVal,proto3" json:"intVal,omitempty"`
	StrVal *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=strVal,proto3" json:"strVal,omitempty"`
}

func (x *IntOrString) Reset() {
	*x = IntOrString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_values_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntOrString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntOrString) ProtoMessage() {}

func (x *IntOrString) ProtoReflect() protoreflect.Message {
	mi := &file_values_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntOrString.ProtoReflect.Descriptor instead.
func (*IntOrString) Descriptor() ([]byte, []int) {
	return file_values_types_proto_rawDescGZIP(), []int{12}
}

func (x *IntOrString) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *IntOrString) GetIntVal() *wrapperspb.Int32Value {
	if x != nil {
		return x.IntVal
	}
	return nil
}

func (x *IntOrString) GetStrVal() *wrapperspb.StringValue {
	if x != nil {
		return x.StrVal
	}
	return nil
}

var File_values_types_proto protoreflect.FileDescriptor

var file_values_types_proto_rawDesc = []byte{
	0x0a, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a,
	0x0c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5e, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x75, 0x62,
	0x62, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x52, 0x44, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x52, 0x44, 0x73, 0x22, 0xa0, 0x07, 0x0a, 0x0f, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x4c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x4c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x73,
	0x79, 0x6e, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x79, 0x6e,
	0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x56, 0x0a, 0x17, 0x66, 0x6f, 0x75, 0x72, 0x6c, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x17, 0x66, 0x6f, 0x75, 0x72, 0x6c, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x4f, 0x6e, 0x41, 0x6c, 0x6c, 0x49, 0x50, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4f, 0x6e, 0x41, 0x6c, 0x6c, 0x49, 0x50, 0x73, 0x12, 0x49,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x5a, 0x6f, 0x6f, 0x6b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x6f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6e, 0x78, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6e, 0x78, 0x6e, 0x73, 0x12, 0x49,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x68, 0x65, 0x61,
	0x70, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x75, 0x62,
	0x62, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x5a, 0x6f, 0x6f,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x12,
	0x45, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x74, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x67,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x0d, 0x5a, 0x6f,
	0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x75,
	0x62, 0x62, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x51,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x22, 0xa3, 0x03, 0x0a, 0x19, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xa7, 0x03, 0x0a, 0x19, 0x5a, 0x6f,
	0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a,
	0x0b, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x0f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x44, 0x0a,
	0x0e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x0b, 0x4e, 0x61, 0x63, 0x6f, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x61, 0x63, 0x6f, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x61, 0x63, 0x6f, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x68, 0x6f,
	0x73, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x68, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x0c,
	0x4e, 0x61, 0x63, 0x6f, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x63, 0x6f, 0x73, 0x44, 0x42, 0x52, 0x02,
	0x64, 0x62, 0x22, 0x93, 0x01, 0x0a, 0x07, 0x4e, 0x61, 0x63, 0x6f, 0x73, 0x44, 0x42, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x43, 0x0a, 0x0b, 0x4e, 0x61, 0x63, 0x6f,
	0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x9e, 0x02,
	0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x7a, 0x6f,
	0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x7a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x6e, 0x61, 0x63, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x63, 0x6f,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x6e, 0x61, 0x63, 0x6f, 0x73, 0x22, 0x8c,
	0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x4f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x56, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x42, 0x22, 0x5a,
	0x20, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_values_types_proto_rawDescOnce sync.Once
	file_values_types_proto_rawDescData = file_values_types_proto_rawDesc
)

func file_values_types_proto_rawDescGZIP() []byte {
	file_values_types_proto_rawDescOnce.Do(func() {
		file_values_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_values_types_proto_rawDescData)
	})
	return file_values_types_proto_rawDescData
}

var file_values_types_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_values_types_proto_goTypes = []interface{}{
	(*GlobalConfig)(nil),              // 0: dubbo.operator.v1alpha1.GlobalConfig
	(*BaseConfig)(nil),                // 1: dubbo.operator.v1alpha1.BaseConfig
	(*ZookeeperConfig)(nil),           // 2: dubbo.operator.v1alpha1.ZookeeperConfig
	(*ZookeeperAutopurge)(nil),        // 3: dubbo.operator.v1alpha1.ZookeeperAutopurge
	(*ZookeeperAuth)(nil),             // 4: dubbo.operator.v1alpha1.ZookeeperAuth
	(*ZookeeperAuthClientConfig)(nil), // 5: dubbo.operator.v1alpha1.ZookeeperAuthClientConfig
	(*ZookeeperAuthQuorumConfig)(nil), // 6: dubbo.operator.v1alpha1.ZookeeperAuthQuorumConfig
	(*NacosConfig)(nil),               // 7: dubbo.operator.v1alpha1.NacosConfig
	(*NacosStorage)(nil),              // 8: dubbo.operator.v1alpha1.NacosStorage
	(*NacosDB)(nil),                   // 9: dubbo.operator.v1alpha1.NacosDB
	(*NacosPlugin)(nil),               // 10: dubbo.operator.v1alpha1.NacosPlugin
	(*Values)(nil),                    // 11: dubbo.operator.v1alpha1.Values
	(*IntOrString)(nil),               // 12: dubbo.operator.v1alpha1.IntOrString
	(*wrapperspb.BoolValue)(nil),      // 13: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),    // 14: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),     // 15: google.protobuf.Int64Value
	(*wrapperspb.Int32Value)(nil),     // 16: google.protobuf.Int32Value
}
var file_values_types_proto_depIdxs = []int32{
	13, // 0: dubbo.operator.v1alpha1.BaseConfig.enableDubboConfigCRDs:type_name -> google.protobuf.BoolValue
	14, // 1: dubbo.operator.v1alpha1.ZookeeperConfig.dataLogDir:type_name -> google.protobuf.StringValue
	15, // 2: dubbo.operator.v1alpha1.ZookeeperConfig.tickTime:type_name -> google.protobuf.Int64Value
	15, // 3: dubbo.operator.v1alpha1.ZookeeperConfig.initLimit:type_name -> google.protobuf.Int64Value
	15, // 4: dubbo.operator.v1alpha1.ZookeeperConfig.syncLimit:type_name -> google.protobuf.Int64Value
	15, // 5: dubbo.operator.v1alpha1.ZookeeperConfig.preAllocSize:type_name -> google.protobuf.Int64Value
	15, // 6: dubbo.operator.v1alpha1.ZookeeperConfig.snapCount:type_name -> google.protobuf.Int64Value
	14, // 7: dubbo.operator.v1alpha1.ZookeeperConfig.fourlwCommandsWhitelist:type_name -> google.protobuf.StringValue
	13, // 8: dubbo.operator.v1alpha1.ZookeeperConfig.listenOnAllIPs:type_name -> google.protobuf.BoolValue
	3,  // 9: dubbo.operator.v1alpha1.ZookeeperConfig.autopurge:type_name -> dubbo.operator.v1alpha1.ZookeeperAutopurge
	15, // 10: dubbo.operator.v1alpha1.ZookeeperConfig.maxClientCnxns:type_name -> google.protobuf.Int64Value
	15, // 11: dubbo.operator.v1alpha1.ZookeeperConfig.maxSessionTimeout:type_name -> google.protobuf.Int64Value
	15, // 12: dubbo.operator.v1alpha1.ZookeeperConfig.heapSize:type_name -> google.protobuf.Int64Value
	14, // 13: dubbo.operator.v1alpha1.ZookeeperConfig.logLevel:type_name -> google.protobuf.StringValue
	4,  // 14: dubbo.operator.v1alpha1.ZookeeperConfig.auth:type_name -> dubbo.operator.v1alpha1.ZookeeperAuth
	15, // 15: dubbo.operator.v1alpha1.ZookeeperAutopurge.snapRetainCount:type_name -> google.protobuf.Int64Value
	15, // 16: dubbo.operator.v1alpha1.ZookeeperAutopurge.purgeInterval:type_name -> google.protobuf.Int64Value
	5,  // 17: dubbo.operator.v1alpha1.ZookeeperAuth.client:type_name -> dubbo.operator.v1alpha1.ZookeeperAuthClientConfig
	6,  // 18: dubbo.operator.v1alpha1.ZookeeperAuth.quorum:type_name -> dubbo.operator.v1alpha1.ZookeeperAuthQuorumConfig
	13, // 19: dubbo.operator.v1alpha1.ZookeeperAuthClientConfig.enabled:type_name -> google.protobuf.BoolValue
	14, // 20: dubbo.operator.v1alpha1.ZookeeperAuthClientConfig.clientUser:type_name -> google.protobuf.StringValue
	14, // 21: dubbo.operator.v1alpha1.ZookeeperAuthClientConfig.clientPassword:type_name -> google.protobuf.StringValue
	14, // 22: dubbo.operator.v1alpha1.ZookeeperAuthClientConfig.serverUsers:type_name -> google.protobuf.StringValue
	14, // 23: dubbo.operator.v1alpha1.ZookeeperAuthClientConfig.serverPasswords:type_name -> google.protobuf.StringValue
	14, // 24: dubbo.operator.v1alpha1.ZookeeperAuthClientConfig.existingSecret:type_name -> google.protobuf.StringValue
	13, // 25: dubbo.operator.v1alpha1.ZookeeperAuthQuorumConfig.enabled:type_name -> google.protobuf.BoolValue
	14, // 26: dubbo.operator.v1alpha1.ZookeeperAuthQuorumConfig.learnerUser:type_name -> google.protobuf.StringValue
	14, // 27: dubbo.operator.v1alpha1.ZookeeperAuthQuorumConfig.learnerPassword:type_name -> google.protobuf.StringValue
	14, // 28: dubbo.operator.v1alpha1.ZookeeperAuthQuorumConfig.serverUsers:type_name -> google.protobuf.StringValue
	14, // 29: dubbo.operator.v1alpha1.ZookeeperAuthQuorumConfig.serverPasswords:type_name -> google.protobuf.StringValue
	14, // 30: dubbo.operator.v1alpha1.ZookeeperAuthQuorumConfig.existingSecret:type_name -> google.protobuf.StringValue
	14, // 31: dubbo.operator.v1alpha1.NacosConfig.mode:type_name -> google.protobuf.StringValue
	8,  // 32: dubbo.operator.v1alpha1.NacosConfig.storage:type_name -> dubbo.operator.v1alpha1.NacosStorage
	10, // 33: dubbo.operator.v1alpha1.NacosConfig.plugin:type_name -> dubbo.operator.v1alpha1.NacosPlugin
	9,  // 34: dubbo.operator.v1alpha1.NacosStorage.db:type_name -> dubbo.operator.v1alpha1.NacosDB
	13, // 35: dubbo.operator.v1alpha1.NacosPlugin.enabled:type_name -> google.protobuf.BoolValue
	0,  // 36: dubbo.operator.v1alpha1.Values.global:type_name -> dubbo.operator.v1alpha1.GlobalConfig
	1,  // 37: dubbo.operator.v1alpha1.Values.base:type_name -> dubbo.operator.v1alpha1.BaseConfig
	2,  // 38: dubbo.operator.v1alpha1.Values.zookeeper:type_name -> dubbo.operator.v1alpha1.ZookeeperConfig
	7,  // 39: dubbo.operator.v1alpha1.Values.nacos:type_name -> dubbo.operator.v1alpha1.NacosConfig
	16, // 40: dubbo.operator.v1alpha1.IntOrString.intVal:type_name -> google.protobuf.Int32Value
	14, // 41: dubbo.operator.v1alpha1.IntOrString.strVal:type_name -> google.protobuf.StringValue
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_values_types_proto_init() }
func file_values_types_proto_init() {
	if File_values_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_values_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZookeeperConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZookeeperAutopurge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZookeeperAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZookeeperAuthClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZookeeperAuthQuorumConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NacosConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NacosStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NacosDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NacosPlugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Values); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_values_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntOrString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_values_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_values_types_proto_goTypes,
		DependencyIndexes: file_values_types_proto_depIdxs,
		MessageInfos:      file_values_types_proto_msgTypes,
	}.Build()
	File_values_types_proto = out.File
	file_values_types_proto_rawDesc = nil
	file_values_types_proto_goTypes = nil
	file_values_types_proto_depIdxs = nil
}
