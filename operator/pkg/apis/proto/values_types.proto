/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';

package dubbo.operator.v1alpha1;

import "google/protobuf/wrappers.proto";

// Package-wide variables from generator "generated".
option go_package = "dubbo.io/dubbo/operator/pkg/apis";

// Global Configuration for Dubbo components.
message GlobalConfig {
  // Specifies the default namespace.
  string dubboNamespace = 1;
}

message BaseConfig {
  // For dubboctl usage to disable dubbo config crds in base
  google.protobuf.BoolValue enableDubboConfigCRDs = 1;
}

message ZookeeperConfig {
  // Controls whether Zookeeper is installed.
  google.protobuf.BoolValue enabled = 1;

  // Dedicated data log directory.
  google.protobuf.StringValue dataLogDir = 2;

  // Basic time unit (in milliseconds) used by ZooKeeper for heartbeats.
  google.protobuf.Int64Value  tickTime = 3;

  // ZooKeeper uses to limit the length of time the ZooKeeper servers in quorum have to connect to a leader.
  google.protobuf.Int64Value  initLimit = 4;

  // How far out of date a server can be from a leader.
  google.protobuf.Int64Value  syncLimit = 5;

  // Block size for transaction log file.
  google.protobuf.Int64Value  preAllocSize = 6;

  // The number of transactions recorded in the transaction log before a snapshot can be taken (and the transaction log rolled).
  google.protobuf.Int64Value  snapCount = 7;

  // A list of comma separated Four Letter Words commands that can be executed.
  google.protobuf.StringValue fourlwCommandsWhitelist = 8;

  // Allow ZooKeeper to listen for connections from its peers on all available IP addresses.
  google.protobuf.BoolValue listenOnAllIPs = 9;

  // Configuration for Zookeeper autopurge.
  ZookeeperAutopurge autopurge = 10;

  // Limits the number of concurrent connections that a single client may make to a single member of the ZooKeeper ensemble.
  google.protobuf.Int64Value maxClientCnxns = 11;

  // Maximum session timeout (in milliseconds) that the server will allow the client to negotiate.
  google.protobuf.Int64Value maxSessionTimeout = 12;

  // Size (in MB) for the Java Heap options (Xmx and Xms).
  google.protobuf.Int64Value heapSize = 13;

  // Log level for the ZooKeeper server. ERROR by default.
  google.protobuf.StringValue logLevel = 14;

  // Configuration for Zookeeper auth.
  ZookeeperAuth auth = 15;
}

message ZookeeperAutopurge {
  // The most recent snapshots amount (and corresponding transaction logs) to retain.
  google.protobuf.Int64Value snapRetainCount = 1;

  // The time interval (in hours) for which the purge task has to be triggered.
  google.protobuf.Int64Value purgeInterval = 2;
}

message ZookeeperAuth {
  // Configuration for Zookeeper client.
  ZookeeperAuthClientConfig client = 1;

  // Configuration for Zookeeper quorum.
  ZookeeperAuthQuorumConfig quorum = 2;
}

message ZookeeperAuthClientConfig {
  // Enable ZooKeeper client-server authentication. It uses SASL/Digest-MD5.
  google.protobuf.BoolValue enabled = 1;

  // User that will use ZooKeeper clients to auth.
  google.protobuf.StringValue clientUser = 2;

  // Password that will use ZooKeeper clients to auth.
  google.protobuf.StringValue clientPassword = 3;

  // Comma, semicolon or whitespace separated list of user to be created.
  google.protobuf.StringValue serverUsers = 4;

  // Comma, semicolon or whitespace separated list of passwords to assign to users when created.
  google.protobuf.StringValue serverPasswords = 5;

  // Use existing secret (ignores previous passwords).
  google.protobuf.StringValue existingSecret = 6;
}

message ZookeeperAuthQuorumConfig {
  // Enable ZooKeeper server-server authentication. It uses SASL/Digest-MD5.
  google.protobuf.BoolValue enabled = 1;

  // User that the ZooKeeper quorumLearner will use to authenticate to quorumServers.
  google.protobuf.StringValue learnerUser = 2;

  // Password that the ZooKeeper quorumLearner will use to authenticate to quorumServers.
  google.protobuf.StringValue learnerPassword = 3;

  // Comma, semicolon or whitespace separated list of users for the quorumServers.
  google.protobuf.StringValue serverUsers = 4;

  // Comma, semicolon or whitespace separated list of passwords to assign to users when created.
  google.protobuf.StringValue serverPasswords = 5;

  // Use existing secret (ignores previous passwords).
  google.protobuf.StringValue existingSecret = 6;
}

message NacosConfig {
  // Controls whether Nacos is installed.
  google.protobuf.BoolValue enabled = 1;

  // Run Mode standalone or cluster.
  google.protobuf.StringValue mode = 2;

  // Configuration for Nacos storage.
  NacosStorage storage = 3;

  // Configuration for Nacos plugin.
  NacosPlugin plugin = 4;

  // Enable Nacos cluster node domain name support.
  string preferhostmode = 5;
}

message NacosStorage {
  // Nacos data storage method `mysql` or `embedded`. The `embedded` supports either standalone or cluster mode.
  string type = 1;

  // Configuration for Nacos db.
  NacosDB db = 2;
}

message NacosDB {
  // Specify the database host for Nacos storing configuration data.
  string host = 1;

  // Specify the database name for Nacos storing configuration data.
  string name = 2;

  // Specify the database port for Nacos storing configuration data.
  int64 port = 3;

  // Specify the database username for Nacos storing configuration data.
  string username = 4;

  // Specify the database password for Nacos storing configuration data.
  string password = 5;

  // Specify the database url parameter for Nacos storing configuration data.
  string param = 6;
}

message NacosPlugin {
  // Plugin Status for Nacos.
  google.protobuf.BoolValue enabled = 1;
}

message Values {
  // Global configuration for dubbo components.
  GlobalConfig global = 1;

  // Configuration for the base component.
  BaseConfig base = 2;

  // Specifies which installation configuration profile to apply.
  string profile = 3;

  // Configuration for the zookeeper component.
  ZookeeperConfig zookeeper = 4;

  // Configuration for the nacos component.
  NacosConfig nacos = 5;
}

// IntOrString is a type that can hold an int32 or a string.  When used in
// JSON or YAML marshalling and unmarshalling, it produces or consumes the
// inner type.  This allows you to have, for example, a JSON field that can
// accept a name or number.
// TODO: Rename to Int32OrString
//
// +protobuf=true
// +protobuf.options.(gogoproto.goproto_stringer)=false
// +k8s:openapi-gen=true
message IntOrString {
  int64 type = 1;

  google.protobuf.Int32Value intVal = 2;

  google.protobuf.StringValue strVal = 3;
}

