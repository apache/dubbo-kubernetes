/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';

package dubbo.operator.v1alpha1;

import "google/protobuf/wrappers.proto";

// Package-wide variables from generator "generated".
option go_package = "dubbo.io/dubbo/operator/pkg/apis";

// Global Configuration for Dubbo components.
message GlobalConfig {}

message BaseConfig {}

message ZookeeperConfig {
  // Controls whether Zookeeper is installed.
  google.protobuf.BoolValue enabled = 1;
  // Zookeeper the directory where the snapshot is stored.
  google.protobuf.StringValue dataLogDir = 2;
}

message NacosConfig {
  // Controls whether Nacos is installed.
  google.protobuf.BoolValue enabled = 1;

  // Run Mode standalone or cluster.
  google.protobuf.StringValue mode = 2;

  // Configuration for Nacos storage.
  NacosStorage storage = 3;
}

message NacosStorage {
  // Nacos data storage method `mysql` or `embedded`. The `embedded` supports either standalone or cluster mode.
  string type = 1;

  // Configuration for Nacos db.
  NacosMYSQLConfig database = 2;
}

message NacosMYSQLConfig {
  // Specify the database host for Nacos storing configuration data.
  string host = 1;

  // Specify the database name for Nacos storing configuration data.
  string name = 2;

  // Specify the database port for Nacos storing configuration data.
  int64 port = 3;

  // Specify the database username for Nacos storing configuration data.
  string username = 4;

  // Specify the database password for Nacos storing configuration data.
  string password = 5;

  // Specify the database url parameter for Nacos storing configuration data.
  string param = 6;
}

message Values {
  // Global configuration for dubbo components.
  GlobalConfig global = 1;

  // Configuration for the base component.
  BaseConfig base = 2;

  // Specifies which installation configuration profile to apply.
  string profile = 3;

  // Configuration for the zookeeper component.
  ZookeeperConfig zookeeper = 4;

  // Configuration for the nacos component.
  NacosConfig nacos = 5;
}

// IntOrString is a type that can hold an int32 or a string.  When used in
// JSON or YAML marshalling and unmarshalling, it produces or consumes the
// inner type.  This allows you to have, for example, a JSON field that can
// accept a name or number.
// TODO: Rename to Int32OrString
//
// +protobuf=true
// +protobuf.options.(gogoproto.goproto_stringer)=false
// +k8s:openapi-gen=true
message IntOrString {
  int64 type = 1;

  google.protobuf.Int32Value intVal = 2;

  google.protobuf.StringValue strVal = 3;
}

