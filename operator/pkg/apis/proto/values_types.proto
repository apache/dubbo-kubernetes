syntax = 'proto3';

package dubbo.operator.v1alpha1;

import "google/protobuf/wrappers.proto";

option go_package = "dubbo.io/dubbo/operator/pkg/apis";

// Global Configuration for Dubbo components.
message GlobalConfig {
  // Specifies the default namespace.
  string dubboNamespace = 1;
}

message BaseConfig {
  // For dubboctl usage to disable dubbo config crds in base
  google.protobuf.BoolValue enableDubboConfigCRDs = 1;
}

message ZookeeperConfig {
  google.protobuf.StringValue dataLogDir = 1;

  google.protobuf.Int64Value  tickTime = 2;

  google.protobuf.Int64Value  initLimit = 3;

  google.protobuf.Int64Value  syncLimit = 4;

  google.protobuf.Int64Value  preAllocSize = 5;

  google.protobuf.Int64Value  snapCount = 6;

  google.protobuf.StringValue fourlwCommandsWhitelist = 7;

  google.protobuf.BoolValue listenOnAllIPs = 8;

  ZookeeperAutopurge autopurge = 9;

  google.protobuf.Int64Value maxClientCnxns = 10;

  google.protobuf.Int64Value maxSessionTimeout = 11;

  google.protobuf.Int64Value heapSize = 12;

  google.protobuf.StringValue logLevel = 13;

  ZookeeperAuth auth = 14;
}

message ZookeeperAutopurge {
  google.protobuf.Int64Value snapRetainCount = 1;

  google.protobuf.Int64Value purgeInterval = 2;
}

message ZookeeperAuth {
  ZookeeperAuthClientConfig client = 1;

  ZookeeperAuthQuorumConfig quorum = 2;
}

message ZookeeperAuthClientConfig {
  google.protobuf.BoolValue enabled = 1;

  google.protobuf.StringValue clientUser = 2;

  google.protobuf.StringValue clientPassword = 3;

  google.protobuf.StringValue serverUsers = 4;

  google.protobuf.StringValue serverPasswords = 5;

  google.protobuf.StringValue existingSecret = 6;
}

message ZookeeperAuthQuorumConfig {
  google.protobuf.BoolValue enabled = 1;

  google.protobuf.StringValue learnerUser = 2;

  google.protobuf.StringValue learnerPassword =3;

  google.protobuf.StringValue serverUsers = 4;

  google.protobuf.StringValue serverPasswords = 5;

  google.protobuf.StringValue existingSecret = 6;
}

message NacosConfig {
  google.protobuf.StringValue mode = 1;

  NacosStorage storage = 2;

  NacosPlugin plugin = 3;

  string preferhostmode = 4;
}

message NacosStorage {
  string type = 1;

  NacosDB db = 2;
}

message NacosDB {
  string host = 1;

  string name = 2;

  int64 port = 3;

  string username = 4;

  string password = 5;

  string param = 6;
}

message NacosPlugin {
  google.protobuf.BoolValue enabled = 1;
}

message Values {
  // Global configuration for dubbo components.
  GlobalConfig global = 1;

  // Configuration for the base component.
  BaseConfig base = 2;

  // Specifies which installation configuration profile to apply.
  string profile = 3;

  // Configuration for the zookeeper component.
  ZookeeperConfig zookeeper = 4;

  // Configuration for the nacos component.
  NacosConfig nacos = 5;
}

// IntOrString is a type that can hold an int32 or a string.  When used in
// JSON or YAML marshalling and unmarshalling, it produces or consumes the
// inner type.  This allows you to have, for example, a JSON field that can
// accept a name or number.
// TODO: Rename to Int32OrString
//
// +protobuf=true
// +protobuf.options.(gogoproto.goproto_stringer)=false
// +k8s:openapi-gen=true
message IntOrString {
  int64 type = 1;

  google.protobuf.Int32Value intVal = 2;

  google.protobuf.StringValue strVal = 3;
}

