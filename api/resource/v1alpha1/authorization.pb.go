//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: authorization.proto

package dubbo_apache_org_v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthorizationPolicyToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string                           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Spec *AuthorizationPolicySpecToClient `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *AuthorizationPolicyToClient) Reset() {
	*x = AuthorizationPolicyToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authorization_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicyToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyToClient) ProtoMessage() {}

func (x *AuthorizationPolicyToClient) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyToClient.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyToClient) Descriptor() ([]byte, []int) {
	return file_authorization_proto_rawDescGZIP(), []int{0}
}

func (x *AuthorizationPolicyToClient) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AuthorizationPolicyToClient) GetSpec() *AuthorizationPolicySpecToClient {
	if x != nil {
		return x.Spec
	}
	return nil
}

type AuthorizationPolicySpecToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    string                             `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Rules     []*AuthorizationPolicyRuleToClient `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	Samples   float32                            `protobuf:"fixed32,3,opt,name=samples,proto3" json:"samples,omitempty"`
	Order     float32                            `protobuf:"fixed32,4,opt,name=order,proto3" json:"order,omitempty"`
	MatchType string                             `protobuf:"bytes,5,opt,name=matchType,proto3" json:"matchType,omitempty"`
}

func (x *AuthorizationPolicySpecToClient) Reset() {
	*x = AuthorizationPolicySpecToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authorization_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicySpecToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicySpecToClient) ProtoMessage() {}

func (x *AuthorizationPolicySpecToClient) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicySpecToClient.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicySpecToClient) Descriptor() ([]byte, []int) {
	return file_authorization_proto_rawDescGZIP(), []int{1}
}

func (x *AuthorizationPolicySpecToClient) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AuthorizationPolicySpecToClient) GetRules() []*AuthorizationPolicyRuleToClient {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *AuthorizationPolicySpecToClient) GetSamples() float32 {
	if x != nil {
		return x.Samples
	}
	return 0
}

func (x *AuthorizationPolicySpecToClient) GetOrder() float32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *AuthorizationPolicySpecToClient) GetMatchType() string {
	if x != nil {
		return x.MatchType
	}
	return ""
}

type AuthorizationPolicyRuleToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *AuthorizationPolicySource    `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	When *AuthorizationPolicyCondition `protobuf:"bytes,2,opt,name=when,proto3" json:"when,omitempty"`
}

func (x *AuthorizationPolicyRuleToClient) Reset() {
	*x = AuthorizationPolicyRuleToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authorization_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicyRuleToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyRuleToClient) ProtoMessage() {}

func (x *AuthorizationPolicyRuleToClient) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyRuleToClient.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyRuleToClient) Descriptor() ([]byte, []int) {
	return file_authorization_proto_rawDescGZIP(), []int{2}
}

func (x *AuthorizationPolicyRuleToClient) GetFrom() *AuthorizationPolicySource {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *AuthorizationPolicyRuleToClient) GetWhen() *AuthorizationPolicyCondition {
	if x != nil {
		return x.When
	}
	return nil
}

type AuthorizationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    string                     `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Rules     []*AuthorizationPolicyRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	Samples   float32                    `protobuf:"fixed32,3,opt,name=samples,proto3" json:"samples,omitempty"`
	Order     float32                    `protobuf:"fixed32,4,opt,name=order,proto3" json:"order,omitempty"`
	MatchType string                     `protobuf:"bytes,5,opt,name=matchType,proto3" json:"matchType,omitempty"`
}

func (x *AuthorizationPolicy) Reset() {
	*x = AuthorizationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authorization_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicy) ProtoMessage() {}

func (x *AuthorizationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicy.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicy) Descriptor() ([]byte, []int) {
	return file_authorization_proto_rawDescGZIP(), []int{3}
}

func (x *AuthorizationPolicy) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AuthorizationPolicy) GetRules() []*AuthorizationPolicyRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *AuthorizationPolicy) GetSamples() float32 {
	if x != nil {
		return x.Samples
	}
	return 0
}

func (x *AuthorizationPolicy) GetOrder() float32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *AuthorizationPolicy) GetMatchType() string {
	if x != nil {
		return x.MatchType
	}
	return ""
}

type AuthorizationPolicyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *AuthorizationPolicySource    `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   *AuthorizationPolicyTarget    `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	When *AuthorizationPolicyCondition `protobuf:"bytes,3,opt,name=when,proto3" json:"when,omitempty"`
}

func (x *AuthorizationPolicyRule) Reset() {
	*x = AuthorizationPolicyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authorization_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyRule) ProtoMessage() {}

func (x *AuthorizationPolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyRule.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyRule) Descriptor() ([]byte, []int) {
	return file_authorization_proto_rawDescGZIP(), []int{4}
}

func (x *AuthorizationPolicyRule) GetFrom() *AuthorizationPolicySource {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *AuthorizationPolicyRule) GetTo() *AuthorizationPolicyTarget {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *AuthorizationPolicyRule) GetWhen() *AuthorizationPolicyCondition {
	if x != nil {
		return x.When
	}
	return nil
}

type AuthorizationPolicySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces    []string                     `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	NotNamespaces []string                     `protobuf:"bytes,2,rep,name=notNamespaces,proto3" json:"notNamespaces,omitempty"`
	IpBlocks      []string                     `protobuf:"bytes,3,rep,name=ipBlocks,proto3" json:"ipBlocks,omitempty"`
	NotIpBlocks   []string                     `protobuf:"bytes,4,rep,name=notIpBlocks,proto3" json:"notIpBlocks,omitempty"`
	Principals    []string                     `protobuf:"bytes,5,rep,name=principals,proto3" json:"principals,omitempty"`
	NotPrincipals []string                     `protobuf:"bytes,6,rep,name=notPrincipals,proto3" json:"notPrincipals,omitempty"`
	Extends       []*AuthorizationPolicyExtend `protobuf:"bytes,7,rep,name=extends,proto3" json:"extends,omitempty"`
	NotExtends    []*AuthorizationPolicyExtend `protobuf:"bytes,8,rep,name=notExtends,proto3" json:"notExtends,omitempty"`
}

func (x *AuthorizationPolicySource) Reset() {
	*x = AuthorizationPolicySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authorization_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicySource) ProtoMessage() {}

func (x *AuthorizationPolicySource) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicySource.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicySource) Descriptor() ([]byte, []int) {
	return file_authorization_proto_rawDescGZIP(), []int{5}
}

func (x *AuthorizationPolicySource) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *AuthorizationPolicySource) GetNotNamespaces() []string {
	if x != nil {
		return x.NotNamespaces
	}
	return nil
}

func (x *AuthorizationPolicySource) GetIpBlocks() []string {
	if x != nil {
		return x.IpBlocks
	}
	return nil
}

func (x *AuthorizationPolicySource) GetNotIpBlocks() []string {
	if x != nil {
		return x.NotIpBlocks
	}
	return nil
}

func (x *AuthorizationPolicySource) GetPrincipals() []string {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *AuthorizationPolicySource) GetNotPrincipals() []string {
	if x != nil {
		return x.NotPrincipals
	}
	return nil
}

func (x *AuthorizationPolicySource) GetExtends() []*AuthorizationPolicyExtend {
	if x != nil {
		return x.Extends
	}
	return nil
}

func (x *AuthorizationPolicySource) GetNotExtends() []*AuthorizationPolicyExtend {
	if x != nil {
		return x.NotExtends
	}
	return nil
}

type AuthorizationPolicyTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces    []string                     `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	NotNamespaces []string                     `protobuf:"bytes,2,rep,name=notNamespaces,proto3" json:"notNamespaces,omitempty"`
	IpBlocks      []string                     `protobuf:"bytes,3,rep,name=ipBlocks,proto3" json:"ipBlocks,omitempty"`
	NotIpBlocks   []string                     `protobuf:"bytes,4,rep,name=notIpBlocks,proto3" json:"notIpBlocks,omitempty"`
	Principals    []string                     `protobuf:"bytes,5,rep,name=principals,proto3" json:"principals,omitempty"`
	NotPrincipals []string                     `protobuf:"bytes,6,rep,name=notPrincipals,proto3" json:"notPrincipals,omitempty"`
	Extends       []*AuthorizationPolicyExtend `protobuf:"bytes,7,rep,name=extends,proto3" json:"extends,omitempty"`
	NotExtends    []*AuthorizationPolicyExtend `protobuf:"bytes,8,rep,name=notExtends,proto3" json:"notExtends,omitempty"`
}

func (x *AuthorizationPolicyTarget) Reset() {
	*x = AuthorizationPolicyTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authorization_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicyTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyTarget) ProtoMessage() {}

func (x *AuthorizationPolicyTarget) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyTarget.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyTarget) Descriptor() ([]byte, []int) {
	return file_authorization_proto_rawDescGZIP(), []int{6}
}

func (x *AuthorizationPolicyTarget) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *AuthorizationPolicyTarget) GetNotNamespaces() []string {
	if x != nil {
		return x.NotNamespaces
	}
	return nil
}

func (x *AuthorizationPolicyTarget) GetIpBlocks() []string {
	if x != nil {
		return x.IpBlocks
	}
	return nil
}

func (x *AuthorizationPolicyTarget) GetNotIpBlocks() []string {
	if x != nil {
		return x.NotIpBlocks
	}
	return nil
}

func (x *AuthorizationPolicyTarget) GetPrincipals() []string {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *AuthorizationPolicyTarget) GetNotPrincipals() []string {
	if x != nil {
		return x.NotPrincipals
	}
	return nil
}

func (x *AuthorizationPolicyTarget) GetExtends() []*AuthorizationPolicyExtend {
	if x != nil {
		return x.Extends
	}
	return nil
}

func (x *AuthorizationPolicyTarget) GetNotExtends() []*AuthorizationPolicyExtend {
	if x != nil {
		return x.NotExtends
	}
	return nil
}

type AuthorizationPolicyCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string                      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values    []*AuthorizationPolicyMatch `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	NotValues []*AuthorizationPolicyMatch `protobuf:"bytes,3,rep,name=notValues,proto3" json:"notValues,omitempty"`
}

func (x *AuthorizationPolicyCondition) Reset() {
	*x = AuthorizationPolicyCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authorization_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyCondition) ProtoMessage() {}

func (x *AuthorizationPolicyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyCondition.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyCondition) Descriptor() ([]byte, []int) {
	return file_authorization_proto_rawDescGZIP(), []int{7}
}

func (x *AuthorizationPolicyCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AuthorizationPolicyCondition) GetValues() []*AuthorizationPolicyMatch {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *AuthorizationPolicyCondition) GetNotValues() []*AuthorizationPolicyMatch {
	if x != nil {
		return x.NotValues
	}
	return nil
}

type AuthorizationPolicyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AuthorizationPolicyMatch) Reset() {
	*x = AuthorizationPolicyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authorization_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyMatch) ProtoMessage() {}

func (x *AuthorizationPolicyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyMatch.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyMatch) Descriptor() ([]byte, []int) {
	return file_authorization_proto_rawDescGZIP(), []int{8}
}

func (x *AuthorizationPolicyMatch) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AuthorizationPolicyMatch) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AuthorizationPolicyExtend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AuthorizationPolicyExtend) Reset() {
	*x = AuthorizationPolicyExtend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authorization_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPolicyExtend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyExtend) ProtoMessage() {}

func (x *AuthorizationPolicyExtend) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyExtend.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyExtend) Descriptor() ([]byte, []int) {
	return file_authorization_proto_rawDescGZIP(), []int{9}
}

func (x *AuthorizationPolicyExtend) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AuthorizationPolicyExtend) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_authorization_proto protoreflect.FileDescriptor

var file_authorization_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x22, 0x7f, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x4e, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x22, 0xd9, 0x01, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64,
	0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb8, 0x01,
	0x0a, 0x1f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x48, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x4b, 0x0a, 0x04, 0x77,
	0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x75, 0x62, 0x62,
	0x6f, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xf6, 0x01, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x75, 0x62,
	0x62, 0x6f, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x44, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x04,
	0x77, 0x68, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x75, 0x62,
	0x62, 0x6f, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x22, 0x8b, 0x03, 0x0a, 0x19, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x74,
	0x49, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x6f, 0x74, 0x49, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x6f, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x73, 0x12, 0x4e, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x73, 0x12, 0x54, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x0a, 0x6e, 0x6f, 0x74,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x49, 0x70,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f,
	0x74, 0x49, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12,
	0x4e, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x12,
	0x54, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43,
	0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x50, 0x01, 0x5a, 0x0b, 0x2e, 0x2e, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_authorization_proto_rawDescOnce sync.Once
	file_authorization_proto_rawDescData = file_authorization_proto_rawDesc
)

func file_authorization_proto_rawDescGZIP() []byte {
	file_authorization_proto_rawDescOnce.Do(func() {
		file_authorization_proto_rawDescData = protoimpl.X.CompressGZIP(file_authorization_proto_rawDescData)
	})
	return file_authorization_proto_rawDescData
}

var file_authorization_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_authorization_proto_goTypes = []interface{}{
	(*AuthorizationPolicyToClient)(nil),     // 0: dubbo.apache.org.v1alpha1.AuthorizationPolicyToClient
	(*AuthorizationPolicySpecToClient)(nil), // 1: dubbo.apache.org.v1alpha1.AuthorizationPolicySpecToClient
	(*AuthorizationPolicyRuleToClient)(nil), // 2: dubbo.apache.org.v1alpha1.AuthorizationPolicyRuleToClient
	(*AuthorizationPolicy)(nil),             // 3: dubbo.apache.org.v1alpha1.AuthorizationPolicy
	(*AuthorizationPolicyRule)(nil),         // 4: dubbo.apache.org.v1alpha1.AuthorizationPolicyRule
	(*AuthorizationPolicySource)(nil),       // 5: dubbo.apache.org.v1alpha1.AuthorizationPolicySource
	(*AuthorizationPolicyTarget)(nil),       // 6: dubbo.apache.org.v1alpha1.AuthorizationPolicyTarget
	(*AuthorizationPolicyCondition)(nil),    // 7: dubbo.apache.org.v1alpha1.AuthorizationPolicyCondition
	(*AuthorizationPolicyMatch)(nil),        // 8: dubbo.apache.org.v1alpha1.AuthorizationPolicyMatch
	(*AuthorizationPolicyExtend)(nil),       // 9: dubbo.apache.org.v1alpha1.AuthorizationPolicyExtend
}
var file_authorization_proto_depIdxs = []int32{
	1,  // 0: dubbo.apache.org.v1alpha1.AuthorizationPolicyToClient.spec:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicySpecToClient
	2,  // 1: dubbo.apache.org.v1alpha1.AuthorizationPolicySpecToClient.rules:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicyRuleToClient
	5,  // 2: dubbo.apache.org.v1alpha1.AuthorizationPolicyRuleToClient.from:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicySource
	7,  // 3: dubbo.apache.org.v1alpha1.AuthorizationPolicyRuleToClient.when:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicyCondition
	4,  // 4: dubbo.apache.org.v1alpha1.AuthorizationPolicy.rules:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicyRule
	5,  // 5: dubbo.apache.org.v1alpha1.AuthorizationPolicyRule.from:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicySource
	6,  // 6: dubbo.apache.org.v1alpha1.AuthorizationPolicyRule.to:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicyTarget
	7,  // 7: dubbo.apache.org.v1alpha1.AuthorizationPolicyRule.when:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicyCondition
	9,  // 8: dubbo.apache.org.v1alpha1.AuthorizationPolicySource.extends:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicyExtend
	9,  // 9: dubbo.apache.org.v1alpha1.AuthorizationPolicySource.notExtends:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicyExtend
	9,  // 10: dubbo.apache.org.v1alpha1.AuthorizationPolicyTarget.extends:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicyExtend
	9,  // 11: dubbo.apache.org.v1alpha1.AuthorizationPolicyTarget.notExtends:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicyExtend
	8,  // 12: dubbo.apache.org.v1alpha1.AuthorizationPolicyCondition.values:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicyMatch
	8,  // 13: dubbo.apache.org.v1alpha1.AuthorizationPolicyCondition.notValues:type_name -> dubbo.apache.org.v1alpha1.AuthorizationPolicyMatch
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_authorization_proto_init() }
func file_authorization_proto_init() {
	if File_authorization_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_authorization_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicyToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authorization_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicySpecToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authorization_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicyRuleToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authorization_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authorization_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authorization_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authorization_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicyTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authorization_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicyCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authorization_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authorization_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPolicyExtend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_authorization_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_authorization_proto_goTypes,
		DependencyIndexes: file_authorization_proto_depIdxs,
		MessageInfos:      file_authorization_proto_msgTypes,
	}.Build()
	File_authorization_proto = out.File
	file_authorization_proto_rawDesc = nil
	file_authorization_proto_goTypes = nil
	file_authorization_proto_depIdxs = nil
}
