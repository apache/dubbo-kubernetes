/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by tools/resource-gen
// Run "make generate" to update this file.

// nolint:whitespace
package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	systemproto "github.com/apache/dubbo-kubernetes/api/system/v1alpha1"
	coremodel "github.com/apache/dubbo-kubernetes/pkg/core/resource/model"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories=dubbo,scope=Cluster

const ConfigKind = "Config"

type Config struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// Mesh is the name of the dubbo mesh this resource belongs to.
	// It may be omitted for cluster-scoped resources.
	//
	// +kubebuilder:validation:Optional
	Mesh string `json:"mesh,omitempty"`
	// Spec is the specification of the Dubbo Config resource.
	// +kubebuilder:validation:Optional
	Spec *systemproto.Config `json:"spec,omitempty"`
	// Status is the status of the Dubbo Config resource.
	Status ConfigStatus `json:"status,omitempty"`
}

type ConfigStatus struct {
	// define resource-specific status here
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Namespaced
type ConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Config `json:"items"`
}

func (r *Config) GetKind() string {
	return r.Kind
}

func (r *Config) GetMesh() string {
	return r.Mesh
}

func (r *Config) SetMesh(mesh string) {
	r.Mesh = mesh
}

func (r *Config) GetResourceKey() string {
	return coremodel.BuildResourceKey(r.Mesh, r.Kind, r.Name)
}

func (r *Config) GetMeta() metav1.ObjectMeta {
	return r.ObjectMeta
}

func (r *Config) SetMeta(m metav1.ObjectMeta) {
	r.ObjectMeta = m
}

func (r *Config) GetSpec() coremodel.ResourceSpec {
	return r.Spec
}

func (r *Config) SetSpec(rs coremodel.ResourceSpec) error {
	if spec, ok := rs.(*systemproto.Config); ok {
		r.Spec = spec
		return nil
	}
	return coremodel.ErrorInvalidItemType(r.Spec, rs)
}
