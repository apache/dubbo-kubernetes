// Generated by tools/resource-gen.
// Run "make generate" to update this file.

// nolint:whitespace
package mesh

import (
	"fmt"

	meshproto "github.com/apache/dubbo-kubernetes/api/mesh/v1alpha1"
	coremodel "github.com/apache/dubbo-kubernetes/pkg/core/model"
	"github.com/apache/dubbo-kubernetes/pkg/core/model/registry"
)

const (
	AffinityRouteType coremodel.ResourceType = "AffinityRoute"
)

var _ coremodel.Resource = &AffinityRouteResource{}

type AffinityRouteResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.AffinityRoute
}

func NewAffinityRouteResource() *AffinityRouteResource {
	return &AffinityRouteResource{
		Spec: &meshproto.AffinityRoute{},
	}
}

func (t *AffinityRouteResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *AffinityRouteResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *AffinityRouteResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *AffinityRouteResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.AffinityRoute)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.AffinityRoute{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *AffinityRouteResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return AffinityRouteResourceTypeDescriptor
}

var _ coremodel.ResourceList = &AffinityRouteResourceList{}

type AffinityRouteResourceList struct {
	Items      []*AffinityRouteResource
	Pagination coremodel.Pagination
}

func (l *AffinityRouteResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *AffinityRouteResourceList) GetItemType() coremodel.ResourceType {
	return AffinityRouteType
}

func (l *AffinityRouteResourceList) NewItem() coremodel.Resource {
	return NewAffinityRouteResource()
}

func (l *AffinityRouteResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*AffinityRouteResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*AffinityRouteResource)(nil), r)
	}
}

func (l *AffinityRouteResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *AffinityRouteResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var AffinityRouteResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                AffinityRouteType,
	Resource:            NewAffinityRouteResource(),
	ResourceList:        &AffinityRouteResourceList{},
	ReadOnly:            false,
	AdminOnly:           false,
	Scope:               coremodel.ScopeMesh,
	DDSFlags:            coremodel.GlobalToAllZonesFlag,
	WsPath:              "affinityroutes",
	DubboctlArg:         "affinityroute",
	DubboctlListArg:     "affinityroutes",
	AllowToInspect:      true,
	IsPolicy:            true,
	SingularDisplayName: "Affinity Route",
	PluralDisplayName:   "Affinity Routes",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(AffinityRouteResourceTypeDescriptor)
}

const (
	ConditionRouteType coremodel.ResourceType = "ConditionRoute"
)

var _ coremodel.Resource = &ConditionRouteResource{}

type ConditionRouteResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.ConditionRoute
}

func NewConditionRouteResource() *ConditionRouteResource {
	return &ConditionRouteResource{
		Spec: &meshproto.ConditionRoute{},
	}
}

func (t *ConditionRouteResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *ConditionRouteResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *ConditionRouteResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *ConditionRouteResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.ConditionRoute)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.ConditionRoute{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *ConditionRouteResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return ConditionRouteResourceTypeDescriptor
}

var _ coremodel.ResourceList = &ConditionRouteResourceList{}

type ConditionRouteResourceList struct {
	Items      []*ConditionRouteResource
	Pagination coremodel.Pagination
}

func (l *ConditionRouteResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ConditionRouteResourceList) GetItemType() coremodel.ResourceType {
	return ConditionRouteType
}

func (l *ConditionRouteResourceList) NewItem() coremodel.Resource {
	return NewConditionRouteResource()
}

func (l *ConditionRouteResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*ConditionRouteResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*ConditionRouteResource)(nil), r)
	}
}

func (l *ConditionRouteResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *ConditionRouteResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var ConditionRouteResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                ConditionRouteType,
	Resource:            NewConditionRouteResource(),
	ResourceList:        &ConditionRouteResourceList{},
	ReadOnly:            false,
	AdminOnly:           false,
	Scope:               coremodel.ScopeMesh,
	DDSFlags:            coremodel.GlobalToAllZonesFlag,
	WsPath:              "conditionroutes",
	DubboctlArg:         "conditionroute",
	DubboctlListArg:     "conditionroutes",
	AllowToInspect:      true,
	IsPolicy:            true,
	SingularDisplayName: "Condition Route",
	PluralDisplayName:   "Condition Routes",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(ConditionRouteResourceTypeDescriptor)
}

const (
	DataplaneType coremodel.ResourceType = "Dataplane"
)

var _ coremodel.Resource = &DataplaneResource{}

type DataplaneResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.Dataplane
}

func NewDataplaneResource() *DataplaneResource {
	return &DataplaneResource{
		Spec: &meshproto.Dataplane{},
	}
}

func (t *DataplaneResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *DataplaneResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *DataplaneResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *DataplaneResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.Dataplane)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.Dataplane{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *DataplaneResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return DataplaneResourceTypeDescriptor
}

var _ coremodel.ResourceList = &DataplaneResourceList{}

type DataplaneResourceList struct {
	Items      []*DataplaneResource
	Pagination coremodel.Pagination
}

func (l *DataplaneResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *DataplaneResourceList) GetItemType() coremodel.ResourceType {
	return DataplaneType
}

func (l *DataplaneResourceList) NewItem() coremodel.Resource {
	return NewDataplaneResource()
}

func (l *DataplaneResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*DataplaneResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*DataplaneResource)(nil), r)
	}
}

func (l *DataplaneResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *DataplaneResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var DataplaneResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                DataplaneType,
	Resource:            NewDataplaneResource(),
	ResourceList:        &DataplaneResourceList{},
	ReadOnly:            false,
	AdminOnly:           false,
	Scope:               coremodel.ScopeMesh,
	DDSFlags:            coremodel.ZoneToGlobalFlag,
	WsPath:              "dataplanes",
	DubboctlArg:         "dataplane",
	DubboctlListArg:     "dataplanes",
	AllowToInspect:      true,
	IsPolicy:            false,
	SingularDisplayName: "Dataplane",
	PluralDisplayName:   "Dataplanes",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(DataplaneResourceTypeDescriptor)
}

const (
	DataplaneInsightType coremodel.ResourceType = "DataplaneInsight"
)

var _ coremodel.Resource = &DataplaneInsightResource{}

type DataplaneInsightResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.DataplaneInsight
}

func NewDataplaneInsightResource() *DataplaneInsightResource {
	return &DataplaneInsightResource{
		Spec: &meshproto.DataplaneInsight{},
	}
}

func (t *DataplaneInsightResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *DataplaneInsightResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *DataplaneInsightResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *DataplaneInsightResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.DataplaneInsight)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.DataplaneInsight{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *DataplaneInsightResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return DataplaneInsightResourceTypeDescriptor
}

var _ coremodel.ResourceList = &DataplaneInsightResourceList{}

type DataplaneInsightResourceList struct {
	Items      []*DataplaneInsightResource
	Pagination coremodel.Pagination
}

func (l *DataplaneInsightResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *DataplaneInsightResourceList) GetItemType() coremodel.ResourceType {
	return DataplaneInsightType
}

func (l *DataplaneInsightResourceList) NewItem() coremodel.Resource {
	return NewDataplaneInsightResource()
}

func (l *DataplaneInsightResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*DataplaneInsightResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*DataplaneInsightResource)(nil), r)
	}
}

func (l *DataplaneInsightResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *DataplaneInsightResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var DataplaneInsightResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                DataplaneInsightType,
	Resource:            NewDataplaneInsightResource(),
	ResourceList:        &DataplaneInsightResourceList{},
	ReadOnly:            true,
	AdminOnly:           false,
	Scope:               coremodel.ScopeMesh,
	DDSFlags:            coremodel.ZoneToGlobalFlag,
	WsPath:              "dataplane-insights",
	DubboctlArg:         "",
	DubboctlListArg:     "",
	AllowToInspect:      false,
	IsPolicy:            false,
	SingularDisplayName: "Dataplane Insight",
	PluralDisplayName:   "Dataplane Insights",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(DataplaneInsightResourceTypeDescriptor)
}

const (
	DynamicConfigType coremodel.ResourceType = "DynamicConfig"
)

var _ coremodel.Resource = &DynamicConfigResource{}

type DynamicConfigResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.DynamicConfig
}

func NewDynamicConfigResource() *DynamicConfigResource {
	return &DynamicConfigResource{
		Spec: &meshproto.DynamicConfig{},
	}
}

func (t *DynamicConfigResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *DynamicConfigResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *DynamicConfigResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *DynamicConfigResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.DynamicConfig)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.DynamicConfig{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *DynamicConfigResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return DynamicConfigResourceTypeDescriptor
}

var _ coremodel.ResourceList = &DynamicConfigResourceList{}

type DynamicConfigResourceList struct {
	Items      []*DynamicConfigResource
	Pagination coremodel.Pagination
}

func (l *DynamicConfigResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *DynamicConfigResourceList) GetItemType() coremodel.ResourceType {
	return DynamicConfigType
}

func (l *DynamicConfigResourceList) NewItem() coremodel.Resource {
	return NewDynamicConfigResource()
}

func (l *DynamicConfigResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*DynamicConfigResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*DynamicConfigResource)(nil), r)
	}
}

func (l *DynamicConfigResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *DynamicConfigResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var DynamicConfigResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                DynamicConfigType,
	Resource:            NewDynamicConfigResource(),
	ResourceList:        &DynamicConfigResourceList{},
	ReadOnly:            false,
	AdminOnly:           false,
	Scope:               coremodel.ScopeMesh,
	DDSFlags:            coremodel.GlobalToAllZonesFlag,
	WsPath:              "dynamicconfigs",
	DubboctlArg:         "dynamicconfig",
	DubboctlListArg:     "dynamicconfigs",
	AllowToInspect:      true,
	IsPolicy:            true,
	SingularDisplayName: "Dynamic Config",
	PluralDisplayName:   "Dynamic Configs",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(DynamicConfigResourceTypeDescriptor)
}

const (
	MappingType coremodel.ResourceType = "Mapping"
)

var _ coremodel.Resource = &MappingResource{}

type MappingResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.Mapping
}

func NewMappingResource() *MappingResource {
	return &MappingResource{
		Spec: &meshproto.Mapping{},
	}
}

func (t *MappingResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *MappingResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *MappingResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *MappingResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.Mapping)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.Mapping{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *MappingResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return MappingResourceTypeDescriptor
}

var _ coremodel.ResourceList = &MappingResourceList{}

type MappingResourceList struct {
	Items      []*MappingResource
	Pagination coremodel.Pagination
}

func (l *MappingResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *MappingResourceList) GetItemType() coremodel.ResourceType {
	return MappingType
}

func (l *MappingResourceList) NewItem() coremodel.Resource {
	return NewMappingResource()
}

func (l *MappingResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*MappingResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*MappingResource)(nil), r)
	}
}

func (l *MappingResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *MappingResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var MappingResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                MappingType,
	Resource:            NewMappingResource(),
	ResourceList:        &MappingResourceList{},
	ReadOnly:            false,
	AdminOnly:           false,
	Scope:               coremodel.ScopeMesh,
	DDSFlags:            coremodel.ZoneToGlobalFlag | coremodel.GlobalToAllButOriginalZoneFlag,
	WsPath:              "mappings",
	DubboctlArg:         "mapping",
	DubboctlListArg:     "mappings",
	AllowToInspect:      true,
	IsPolicy:            true,
	SingularDisplayName: "Mapping",
	PluralDisplayName:   "Mappings",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(MappingResourceTypeDescriptor)
}

const (
	MeshType coremodel.ResourceType = "Mesh"
)

var _ coremodel.Resource = &MeshResource{}

type MeshResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.Mesh
}

func NewMeshResource() *MeshResource {
	return &MeshResource{
		Spec: &meshproto.Mesh{},
	}
}

func (m *MeshResource) GetMeta() coremodel.ResourceMeta {
	return m.Meta
}

func (m *MeshResource) SetMeta(meta coremodel.ResourceMeta) {
	m.Meta = meta
}

func (m *MeshResource) GetSpec() coremodel.ResourceSpec {
	return m.Spec
}

func (m *MeshResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.Mesh)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			m.Spec = &meshproto.Mesh{}
		} else {
			m.Spec = protoType
		}
		return nil
	}
}

func (m *MeshResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return MeshResourceTypeDescriptor
}

var _ coremodel.ResourceList = &MeshResourceList{}

type MeshResourceList struct {
	Items      []*MeshResource
	Pagination coremodel.Pagination
}

func (l *MeshResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *MeshResourceList) GetItemType() coremodel.ResourceType {
	return MeshType
}

func (l *MeshResourceList) NewItem() coremodel.Resource {
	return NewMeshResource()
}

func (l *MeshResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*MeshResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*MeshResource)(nil), r)
	}
}

func (l *MeshResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *MeshResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var MeshResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                MeshType,
	Resource:            NewMeshResource(),
	ResourceList:        &MeshResourceList{},
	ReadOnly:            false,
	AdminOnly:           false,
	Scope:               coremodel.ScopeGlobal,
	DDSFlags:            coremodel.GlobalToAllZonesFlag,
	WsPath:              "meshes",
	DubboctlArg:         "mesh",
	DubboctlListArg:     "meshes",
	AllowToInspect:      true,
	IsPolicy:            false,
	SingularDisplayName: "Mesh",
	PluralDisplayName:   "Meshes",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(MeshResourceTypeDescriptor)
}

const (
	MeshInsightType coremodel.ResourceType = "MeshInsight"
)

var _ coremodel.Resource = &MeshInsightResource{}

type MeshInsightResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.MeshInsight
}

func NewMeshInsightResource() *MeshInsightResource {
	return &MeshInsightResource{
		Spec: &meshproto.MeshInsight{},
	}
}

func (t *MeshInsightResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *MeshInsightResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *MeshInsightResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *MeshInsightResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.MeshInsight)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.MeshInsight{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *MeshInsightResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return MeshInsightResourceTypeDescriptor
}

var _ coremodel.ResourceList = &MeshInsightResourceList{}

type MeshInsightResourceList struct {
	Items      []*MeshInsightResource
	Pagination coremodel.Pagination
}

func (l *MeshInsightResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *MeshInsightResourceList) GetItemType() coremodel.ResourceType {
	return MeshInsightType
}

func (l *MeshInsightResourceList) NewItem() coremodel.Resource {
	return NewMeshInsightResource()
}

func (l *MeshInsightResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*MeshInsightResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*MeshInsightResource)(nil), r)
	}
}

func (l *MeshInsightResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *MeshInsightResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var MeshInsightResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                MeshInsightType,
	Resource:            NewMeshInsightResource(),
	ResourceList:        &MeshInsightResourceList{},
	ReadOnly:            true,
	AdminOnly:           false,
	Scope:               coremodel.ScopeGlobal,
	WsPath:              "mesh-insights",
	DubboctlArg:         "",
	DubboctlListArg:     "",
	AllowToInspect:      false,
	IsPolicy:            false,
	SingularDisplayName: "Mesh Insight",
	PluralDisplayName:   "Mesh Insights",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(MeshInsightResourceTypeDescriptor)
}

const (
	MetaDataType coremodel.ResourceType = "MetaData"
)

var _ coremodel.Resource = &MetaDataResource{}

type MetaDataResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.MetaData
}

func NewMetaDataResource() *MetaDataResource {
	return &MetaDataResource{
		Spec: &meshproto.MetaData{},
	}
}

func (t *MetaDataResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *MetaDataResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *MetaDataResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *MetaDataResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.MetaData)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.MetaData{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *MetaDataResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return MetaDataResourceTypeDescriptor
}

var _ coremodel.ResourceList = &MetaDataResourceList{}

type MetaDataResourceList struct {
	Items      []*MetaDataResource
	Pagination coremodel.Pagination
}

func (l *MetaDataResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *MetaDataResourceList) GetItemType() coremodel.ResourceType {
	return MetaDataType
}

func (l *MetaDataResourceList) NewItem() coremodel.Resource {
	return NewMetaDataResource()
}

func (l *MetaDataResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*MetaDataResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*MetaDataResource)(nil), r)
	}
}

func (l *MetaDataResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *MetaDataResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var MetaDataResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                MetaDataType,
	Resource:            NewMetaDataResource(),
	ResourceList:        &MetaDataResourceList{},
	ReadOnly:            false,
	AdminOnly:           false,
	Scope:               coremodel.ScopeMesh,
	DDSFlags:            coremodel.ZoneToGlobalFlag,
	WsPath:              "metadatas",
	DubboctlArg:         "metadata",
	DubboctlListArg:     "metadatas",
	AllowToInspect:      true,
	IsPolicy:            true,
	SingularDisplayName: "Meta Data",
	PluralDisplayName:   "Meta Datas",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(MetaDataResourceTypeDescriptor)
}

const (
	TagRouteType coremodel.ResourceType = "TagRoute"
)

var _ coremodel.Resource = &TagRouteResource{}

type TagRouteResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.TagRoute
}

func NewTagRouteResource() *TagRouteResource {
	return &TagRouteResource{
		Spec: &meshproto.TagRoute{},
	}
}

func (t *TagRouteResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *TagRouteResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *TagRouteResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *TagRouteResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.TagRoute)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.TagRoute{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *TagRouteResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return TagRouteResourceTypeDescriptor
}

var _ coremodel.ResourceList = &TagRouteResourceList{}

type TagRouteResourceList struct {
	Items      []*TagRouteResource
	Pagination coremodel.Pagination
}

func (l *TagRouteResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *TagRouteResourceList) GetItemType() coremodel.ResourceType {
	return TagRouteType
}

func (l *TagRouteResourceList) NewItem() coremodel.Resource {
	return NewTagRouteResource()
}

func (l *TagRouteResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*TagRouteResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*TagRouteResource)(nil), r)
	}
}

func (l *TagRouteResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *TagRouteResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var TagRouteResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                TagRouteType,
	Resource:            NewTagRouteResource(),
	ResourceList:        &TagRouteResourceList{},
	ReadOnly:            false,
	AdminOnly:           false,
	Scope:               coremodel.ScopeMesh,
	DDSFlags:            coremodel.GlobalToAllZonesFlag,
	WsPath:              "tagroutes",
	DubboctlArg:         "tagroute",
	DubboctlListArg:     "tagroutes",
	AllowToInspect:      true,
	IsPolicy:            true,
	SingularDisplayName: "Tag Route",
	PluralDisplayName:   "Tag Routes",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(TagRouteResourceTypeDescriptor)
}

const (
	ZoneEgressType coremodel.ResourceType = "ZoneEgress"
)

var _ coremodel.Resource = &ZoneEgressResource{}

type ZoneEgressResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.ZoneEgress
}

func NewZoneEgressResource() *ZoneEgressResource {
	return &ZoneEgressResource{
		Spec: &meshproto.ZoneEgress{},
	}
}

func (t *ZoneEgressResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *ZoneEgressResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *ZoneEgressResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *ZoneEgressResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.ZoneEgress)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.ZoneEgress{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *ZoneEgressResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return ZoneEgressResourceTypeDescriptor
}

var _ coremodel.ResourceList = &ZoneEgressResourceList{}

type ZoneEgressResourceList struct {
	Items      []*ZoneEgressResource
	Pagination coremodel.Pagination
}

func (l *ZoneEgressResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ZoneEgressResourceList) GetItemType() coremodel.ResourceType {
	return ZoneEgressType
}

func (l *ZoneEgressResourceList) NewItem() coremodel.Resource {
	return NewZoneEgressResource()
}

func (l *ZoneEgressResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*ZoneEgressResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*ZoneEgressResource)(nil), r)
	}
}

func (l *ZoneEgressResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *ZoneEgressResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var ZoneEgressResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                ZoneEgressType,
	Resource:            NewZoneEgressResource(),
	ResourceList:        &ZoneEgressResourceList{},
	ReadOnly:            false,
	AdminOnly:           false,
	Scope:               coremodel.ScopeGlobal,
	DDSFlags:            coremodel.ZoneToGlobalFlag | coremodel.GlobalToAllButOriginalZoneFlag,
	WsPath:              "zoneegresses",
	DubboctlArg:         "zoneegress",
	DubboctlListArg:     "zoneegresses",
	AllowToInspect:      true,
	IsPolicy:            false,
	SingularDisplayName: "Zone Egress",
	PluralDisplayName:   "Zone Egresses",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(ZoneEgressResourceTypeDescriptor)
}

const (
	ZoneEgressInsightType coremodel.ResourceType = "ZoneEgressInsight"
)

var _ coremodel.Resource = &ZoneEgressInsightResource{}

type ZoneEgressInsightResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.ZoneEgressInsight
}

func NewZoneEgressInsightResource() *ZoneEgressInsightResource {
	return &ZoneEgressInsightResource{
		Spec: &meshproto.ZoneEgressInsight{},
	}
}

func (t *ZoneEgressInsightResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *ZoneEgressInsightResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *ZoneEgressInsightResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *ZoneEgressInsightResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.ZoneEgressInsight)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.ZoneEgressInsight{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *ZoneEgressInsightResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return ZoneEgressInsightResourceTypeDescriptor
}

var _ coremodel.ResourceList = &ZoneEgressInsightResourceList{}

type ZoneEgressInsightResourceList struct {
	Items      []*ZoneEgressInsightResource
	Pagination coremodel.Pagination
}

func (l *ZoneEgressInsightResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ZoneEgressInsightResourceList) GetItemType() coremodel.ResourceType {
	return ZoneEgressInsightType
}

func (l *ZoneEgressInsightResourceList) NewItem() coremodel.Resource {
	return NewZoneEgressInsightResource()
}

func (l *ZoneEgressInsightResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*ZoneEgressInsightResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*ZoneEgressInsightResource)(nil), r)
	}
}

func (l *ZoneEgressInsightResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *ZoneEgressInsightResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var ZoneEgressInsightResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                ZoneEgressInsightType,
	Resource:            NewZoneEgressInsightResource(),
	ResourceList:        &ZoneEgressInsightResourceList{},
	ReadOnly:            true,
	AdminOnly:           false,
	Scope:               coremodel.ScopeGlobal,
	DDSFlags:            coremodel.ZoneToGlobalFlag,
	WsPath:              "zoneegressinsights",
	DubboctlArg:         "",
	DubboctlListArg:     "",
	AllowToInspect:      false,
	IsPolicy:            false,
	SingularDisplayName: "Zone Egress Insight",
	PluralDisplayName:   "Zone Egress Insights",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(ZoneEgressInsightResourceTypeDescriptor)
}

const (
	ZoneIngressType coremodel.ResourceType = "ZoneIngress"
)

var _ coremodel.Resource = &ZoneIngressResource{}

type ZoneIngressResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.ZoneIngress
}

func NewZoneIngressResource() *ZoneIngressResource {
	return &ZoneIngressResource{
		Spec: &meshproto.ZoneIngress{},
	}
}

func (t *ZoneIngressResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *ZoneIngressResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *ZoneIngressResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *ZoneIngressResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.ZoneIngress)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.ZoneIngress{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *ZoneIngressResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return ZoneIngressResourceTypeDescriptor
}

var _ coremodel.ResourceList = &ZoneIngressResourceList{}

type ZoneIngressResourceList struct {
	Items      []*ZoneIngressResource
	Pagination coremodel.Pagination
}

func (l *ZoneIngressResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ZoneIngressResourceList) GetItemType() coremodel.ResourceType {
	return ZoneIngressType
}

func (l *ZoneIngressResourceList) NewItem() coremodel.Resource {
	return NewZoneIngressResource()
}

func (l *ZoneIngressResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*ZoneIngressResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*ZoneIngressResource)(nil), r)
	}
}

func (l *ZoneIngressResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *ZoneIngressResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var ZoneIngressResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                ZoneIngressType,
	Resource:            NewZoneIngressResource(),
	ResourceList:        &ZoneIngressResourceList{},
	ReadOnly:            false,
	AdminOnly:           false,
	Scope:               coremodel.ScopeGlobal,
	DDSFlags:            coremodel.ZoneToGlobalFlag | coremodel.GlobalToAllButOriginalZoneFlag,
	WsPath:              "zoneingresses",
	DubboctlArg:         "zoneingress",
	DubboctlListArg:     "zoneingresses",
	AllowToInspect:      true,
	IsPolicy:            false,
	SingularDisplayName: "Zone Ingress",
	PluralDisplayName:   "Zone Ingresses",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(ZoneIngressResourceTypeDescriptor)
}

const (
	ZoneIngressInsightType coremodel.ResourceType = "ZoneIngressInsight"
)

var _ coremodel.Resource = &ZoneIngressInsightResource{}

type ZoneIngressInsightResource struct {
	Meta coremodel.ResourceMeta
	Spec *meshproto.ZoneIngressInsight
}

func NewZoneIngressInsightResource() *ZoneIngressInsightResource {
	return &ZoneIngressInsightResource{
		Spec: &meshproto.ZoneIngressInsight{},
	}
}

func (t *ZoneIngressInsightResource) GetMeta() coremodel.ResourceMeta {
	return t.Meta
}

func (t *ZoneIngressInsightResource) SetMeta(m coremodel.ResourceMeta) {
	t.Meta = m
}

func (t *ZoneIngressInsightResource) GetSpec() coremodel.ResourceSpec {
	return t.Spec
}

func (t *ZoneIngressInsightResource) SetSpec(spec coremodel.ResourceSpec) error {
	protoType, ok := spec.(*meshproto.ZoneIngressInsight)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &meshproto.ZoneIngressInsight{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *ZoneIngressInsightResource) Descriptor() coremodel.ResourceTypeDescriptor {
	return ZoneIngressInsightResourceTypeDescriptor
}

var _ coremodel.ResourceList = &ZoneIngressInsightResourceList{}

type ZoneIngressInsightResourceList struct {
	Items      []*ZoneIngressInsightResource
	Pagination coremodel.Pagination
}

func (l *ZoneIngressInsightResourceList) GetItems() []coremodel.Resource {
	res := make([]coremodel.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ZoneIngressInsightResourceList) GetItemType() coremodel.ResourceType {
	return ZoneIngressInsightType
}

func (l *ZoneIngressInsightResourceList) NewItem() coremodel.Resource {
	return NewZoneIngressInsightResource()
}

func (l *ZoneIngressInsightResourceList) AddItem(r coremodel.Resource) error {
	if trr, ok := r.(*ZoneIngressInsightResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return coremodel.ErrorInvalidItemType((*ZoneIngressInsightResource)(nil), r)
	}
}

func (l *ZoneIngressInsightResourceList) GetPagination() *coremodel.Pagination {
	return &l.Pagination
}

func (l *ZoneIngressInsightResourceList) SetPagination(p coremodel.Pagination) {
	l.Pagination = p
}

var ZoneIngressInsightResourceTypeDescriptor = coremodel.ResourceTypeDescriptor{
	Name:                ZoneIngressInsightType,
	Resource:            NewZoneIngressInsightResource(),
	ResourceList:        &ZoneIngressInsightResourceList{},
	ReadOnly:            true,
	AdminOnly:           false,
	Scope:               coremodel.ScopeGlobal,
	DDSFlags:            coremodel.ZoneToGlobalFlag,
	WsPath:              "zone-ingress-insights",
	DubboctlArg:         "",
	DubboctlListArg:     "",
	AllowToInspect:      false,
	IsPolicy:            false,
	SingularDisplayName: "Zone Ingress Insight",
	PluralDisplayName:   "Zone Ingress Insights",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(ZoneIngressInsightResourceTypeDescriptor)
}
