// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: registry/v1alpha1/admin.proto

package registryv1alpha1

import (
	context "context"
)

import (
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminService_ForceDeleteUser_FullMethodName                      = "/bufman.dubbo.apache.org.registry.v1alpha1.AdminService/ForceDeleteUser"
	AdminService_UpdateUserVerificationStatus_FullMethodName         = "/bufman.dubbo.apache.org.registry.v1alpha1.AdminService/UpdateUserVerificationStatus"
	AdminService_UpdateOrganizationVerificationStatus_FullMethodName = "/bufman.dubbo.apache.org.registry.v1alpha1.AdminService/UpdateOrganizationVerificationStatus"
	AdminService_CreateMachineUser_FullMethodName                    = "/bufman.dubbo.apache.org.registry.v1alpha1.AdminService/CreateMachineUser"
	AdminService_GetBreakingChangePolicy_FullMethodName              = "/bufman.dubbo.apache.org.registry.v1alpha1.AdminService/GetBreakingChangePolicy"
	AdminService_UpdateBreakingChangePolicy_FullMethodName           = "/bufman.dubbo.apache.org.registry.v1alpha1.AdminService/UpdateBreakingChangePolicy"
	AdminService_GetUniquenessPolicy_FullMethodName                  = "/bufman.dubbo.apache.org.registry.v1alpha1.AdminService/GetUniquenessPolicy"
	AdminService_UpdateUniquenessPolicy_FullMethodName               = "/bufman.dubbo.apache.org.registry.v1alpha1.AdminService/UpdateUniquenessPolicy"
	AdminService_ListServerUniquenessCollisions_FullMethodName       = "/bufman.dubbo.apache.org.registry.v1alpha1.AdminService/ListServerUniquenessCollisions"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	// ForceDeleteUser forces to delete a user. Resources and organizations that are
	// solely owned by the user will also be deleted.
	ForceDeleteUser(ctx context.Context, in *ForceDeleteUserRequest, opts ...grpc.CallOption) (*ForceDeleteUserResponse, error)
	// Update a user's verification status.
	UpdateUserVerificationStatus(ctx context.Context, in *UpdateUserVerificationStatusRequest, opts ...grpc.CallOption) (*UpdateUserVerificationStatusResponse, error)
	// Update a organization's verification.
	UpdateOrganizationVerificationStatus(ctx context.Context, in *UpdateOrganizationVerificationStatusRequest, opts ...grpc.CallOption) (*UpdateOrganizationVerificationStatusResponse, error)
	// Create a new machine user on the server.
	CreateMachineUser(ctx context.Context, in *CreateMachineUserRequest, opts ...grpc.CallOption) (*CreateMachineUserResponse, error)
	// Get breaking change policy for the server.
	GetBreakingChangePolicy(ctx context.Context, in *GetBreakingChangePolicyRequest, opts ...grpc.CallOption) (*GetBreakingChangePolicyResponse, error)
	// Update breaking change policy for the server.
	UpdateBreakingChangePolicy(ctx context.Context, in *UpdateBreakingChangePolicyRequest, opts ...grpc.CallOption) (*UpdateBreakingChangePolicyResponse, error)
	// Get uniqueness policy for the server.
	GetUniquenessPolicy(ctx context.Context, in *GetUniquenessPolicyRequest, opts ...grpc.CallOption) (*GetUniquenessPolicyResponse, error)
	// Update uniqueness policy enforcement for the server.
	UpdateUniquenessPolicy(ctx context.Context, in *UpdateUniquenessPolicyRequest, opts ...grpc.CallOption) (*UpdateUniquenessPolicyResponse, error)
	// Get state of uniqueness collisions for the server
	ListServerUniquenessCollisions(ctx context.Context, in *ListServerUniquenessCollisionsRequest, opts ...grpc.CallOption) (*ListServerUniquenessCollisionsResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) ForceDeleteUser(ctx context.Context, in *ForceDeleteUserRequest, opts ...grpc.CallOption) (*ForceDeleteUserResponse, error) {
	out := new(ForceDeleteUserResponse)
	err := c.cc.Invoke(ctx, AdminService_ForceDeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateUserVerificationStatus(ctx context.Context, in *UpdateUserVerificationStatusRequest, opts ...grpc.CallOption) (*UpdateUserVerificationStatusResponse, error) {
	out := new(UpdateUserVerificationStatusResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateUserVerificationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateOrganizationVerificationStatus(ctx context.Context, in *UpdateOrganizationVerificationStatusRequest, opts ...grpc.CallOption) (*UpdateOrganizationVerificationStatusResponse, error) {
	out := new(UpdateOrganizationVerificationStatusResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateOrganizationVerificationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateMachineUser(ctx context.Context, in *CreateMachineUserRequest, opts ...grpc.CallOption) (*CreateMachineUserResponse, error) {
	out := new(CreateMachineUserResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateMachineUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetBreakingChangePolicy(ctx context.Context, in *GetBreakingChangePolicyRequest, opts ...grpc.CallOption) (*GetBreakingChangePolicyResponse, error) {
	out := new(GetBreakingChangePolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetBreakingChangePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateBreakingChangePolicy(ctx context.Context, in *UpdateBreakingChangePolicyRequest, opts ...grpc.CallOption) (*UpdateBreakingChangePolicyResponse, error) {
	out := new(UpdateBreakingChangePolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateBreakingChangePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUniquenessPolicy(ctx context.Context, in *GetUniquenessPolicyRequest, opts ...grpc.CallOption) (*GetUniquenessPolicyResponse, error) {
	out := new(GetUniquenessPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetUniquenessPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateUniquenessPolicy(ctx context.Context, in *UpdateUniquenessPolicyRequest, opts ...grpc.CallOption) (*UpdateUniquenessPolicyResponse, error) {
	out := new(UpdateUniquenessPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateUniquenessPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListServerUniquenessCollisions(ctx context.Context, in *ListServerUniquenessCollisionsRequest, opts ...grpc.CallOption) (*ListServerUniquenessCollisionsResponse, error) {
	out := new(ListServerUniquenessCollisionsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListServerUniquenessCollisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	// ForceDeleteUser forces to delete a user. Resources and organizations that are
	// solely owned by the user will also be deleted.
	ForceDeleteUser(context.Context, *ForceDeleteUserRequest) (*ForceDeleteUserResponse, error)
	// Update a user's verification status.
	UpdateUserVerificationStatus(context.Context, *UpdateUserVerificationStatusRequest) (*UpdateUserVerificationStatusResponse, error)
	// Update a organization's verification.
	UpdateOrganizationVerificationStatus(context.Context, *UpdateOrganizationVerificationStatusRequest) (*UpdateOrganizationVerificationStatusResponse, error)
	// Create a new machine user on the server.
	CreateMachineUser(context.Context, *CreateMachineUserRequest) (*CreateMachineUserResponse, error)
	// Get breaking change policy for the server.
	GetBreakingChangePolicy(context.Context, *GetBreakingChangePolicyRequest) (*GetBreakingChangePolicyResponse, error)
	// Update breaking change policy for the server.
	UpdateBreakingChangePolicy(context.Context, *UpdateBreakingChangePolicyRequest) (*UpdateBreakingChangePolicyResponse, error)
	// Get uniqueness policy for the server.
	GetUniquenessPolicy(context.Context, *GetUniquenessPolicyRequest) (*GetUniquenessPolicyResponse, error)
	// Update uniqueness policy enforcement for the server.
	UpdateUniquenessPolicy(context.Context, *UpdateUniquenessPolicyRequest) (*UpdateUniquenessPolicyResponse, error)
	// Get state of uniqueness collisions for the server
	ListServerUniquenessCollisions(context.Context, *ListServerUniquenessCollisionsRequest) (*ListServerUniquenessCollisionsResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) ForceDeleteUser(context.Context, *ForceDeleteUserRequest) (*ForceDeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceDeleteUser not implemented")
}
func (UnimplementedAdminServiceServer) UpdateUserVerificationStatus(context.Context, *UpdateUserVerificationStatusRequest) (*UpdateUserVerificationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserVerificationStatus not implemented")
}
func (UnimplementedAdminServiceServer) UpdateOrganizationVerificationStatus(context.Context, *UpdateOrganizationVerificationStatusRequest) (*UpdateOrganizationVerificationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationVerificationStatus not implemented")
}
func (UnimplementedAdminServiceServer) CreateMachineUser(context.Context, *CreateMachineUserRequest) (*CreateMachineUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachineUser not implemented")
}
func (UnimplementedAdminServiceServer) GetBreakingChangePolicy(context.Context, *GetBreakingChangePolicyRequest) (*GetBreakingChangePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBreakingChangePolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateBreakingChangePolicy(context.Context, *UpdateBreakingChangePolicyRequest) (*UpdateBreakingChangePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBreakingChangePolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetUniquenessPolicy(context.Context, *GetUniquenessPolicyRequest) (*GetUniquenessPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniquenessPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateUniquenessPolicy(context.Context, *UpdateUniquenessPolicyRequest) (*UpdateUniquenessPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUniquenessPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ListServerUniquenessCollisions(context.Context, *ListServerUniquenessCollisionsRequest) (*ListServerUniquenessCollisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServerUniquenessCollisions not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_ForceDeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceDeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ForceDeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ForceDeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ForceDeleteUser(ctx, req.(*ForceDeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateUserVerificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserVerificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateUserVerificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateUserVerificationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateUserVerificationStatus(ctx, req.(*UpdateUserVerificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateOrganizationVerificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationVerificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateOrganizationVerificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateOrganizationVerificationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateOrganizationVerificationStatus(ctx, req.(*UpdateOrganizationVerificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateMachineUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateMachineUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateMachineUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateMachineUser(ctx, req.(*CreateMachineUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetBreakingChangePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBreakingChangePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetBreakingChangePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetBreakingChangePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetBreakingChangePolicy(ctx, req.(*GetBreakingChangePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateBreakingChangePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBreakingChangePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateBreakingChangePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateBreakingChangePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateBreakingChangePolicy(ctx, req.(*UpdateBreakingChangePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUniquenessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniquenessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUniquenessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetUniquenessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUniquenessPolicy(ctx, req.(*GetUniquenessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateUniquenessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUniquenessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateUniquenessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateUniquenessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateUniquenessPolicy(ctx, req.(*UpdateUniquenessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListServerUniquenessCollisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServerUniquenessCollisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListServerUniquenessCollisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListServerUniquenessCollisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListServerUniquenessCollisions(ctx, req.(*ListServerUniquenessCollisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bufman.dubbo.apache.org.registry.v1alpha1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForceDeleteUser",
			Handler:    _AdminService_ForceDeleteUser_Handler,
		},
		{
			MethodName: "UpdateUserVerificationStatus",
			Handler:    _AdminService_UpdateUserVerificationStatus_Handler,
		},
		{
			MethodName: "UpdateOrganizationVerificationStatus",
			Handler:    _AdminService_UpdateOrganizationVerificationStatus_Handler,
		},
		{
			MethodName: "CreateMachineUser",
			Handler:    _AdminService_CreateMachineUser_Handler,
		},
		{
			MethodName: "GetBreakingChangePolicy",
			Handler:    _AdminService_GetBreakingChangePolicy_Handler,
		},
		{
			MethodName: "UpdateBreakingChangePolicy",
			Handler:    _AdminService_UpdateBreakingChangePolicy_Handler,
		},
		{
			MethodName: "GetUniquenessPolicy",
			Handler:    _AdminService_GetUniquenessPolicy_Handler,
		},
		{
			MethodName: "UpdateUniquenessPolicy",
			Handler:    _AdminService_UpdateUniquenessPolicy_Handler,
		},
		{
			MethodName: "ListServerUniquenessCollisions",
			Handler:    _AdminService_ListServerUniquenessCollisions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/v1alpha1/admin.proto",
}
