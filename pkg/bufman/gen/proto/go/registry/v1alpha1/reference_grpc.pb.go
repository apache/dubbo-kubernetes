// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: registry/v1alpha1/reference.proto

package registryv1alpha1

import (
	context "context"
)

import (
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReferenceService_GetReferenceByName_FullMethodName                = "/bufman.dubbo.apache.org.registry.v1alpha1.ReferenceService/GetReferenceByName"
	ReferenceService_ListGitCommitMetadataForReference_FullMethodName = "/bufman.dubbo.apache.org.registry.v1alpha1.ReferenceService/ListGitCommitMetadataForReference"
)

// ReferenceServiceClient is the client API for ReferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReferenceServiceClient interface {
	// GetReferenceByName takes a reference name and returns the
	// reference either as 'main', a tag, or commit.
	GetReferenceByName(ctx context.Context, in *GetReferenceByNameRequest, opts ...grpc.CallOption) (*GetReferenceByNameResponse, error)
	// ListGitCommitMetadataForReference takes a string reference and returns all the git commit
	// metadata associated with the resolved reference commit.
	ListGitCommitMetadataForReference(ctx context.Context, in *ListGitCommitMetadataForReferenceRequest, opts ...grpc.CallOption) (*ListGitCommitMetadataForReferenceResponse, error)
}

type referenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferenceServiceClient(cc grpc.ClientConnInterface) ReferenceServiceClient {
	return &referenceServiceClient{cc}
}

func (c *referenceServiceClient) GetReferenceByName(ctx context.Context, in *GetReferenceByNameRequest, opts ...grpc.CallOption) (*GetReferenceByNameResponse, error) {
	out := new(GetReferenceByNameResponse)
	err := c.cc.Invoke(ctx, ReferenceService_GetReferenceByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) ListGitCommitMetadataForReference(ctx context.Context, in *ListGitCommitMetadataForReferenceRequest, opts ...grpc.CallOption) (*ListGitCommitMetadataForReferenceResponse, error) {
	out := new(ListGitCommitMetadataForReferenceResponse)
	err := c.cc.Invoke(ctx, ReferenceService_ListGitCommitMetadataForReference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferenceServiceServer is the server API for ReferenceService service.
// All implementations must embed UnimplementedReferenceServiceServer
// for forward compatibility
type ReferenceServiceServer interface {
	// GetReferenceByName takes a reference name and returns the
	// reference either as 'main', a tag, or commit.
	GetReferenceByName(context.Context, *GetReferenceByNameRequest) (*GetReferenceByNameResponse, error)
	// ListGitCommitMetadataForReference takes a string reference and returns all the git commit
	// metadata associated with the resolved reference commit.
	ListGitCommitMetadataForReference(context.Context, *ListGitCommitMetadataForReferenceRequest) (*ListGitCommitMetadataForReferenceResponse, error)
	mustEmbedUnimplementedReferenceServiceServer()
}

// UnimplementedReferenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReferenceServiceServer struct {
}

func (UnimplementedReferenceServiceServer) GetReferenceByName(context.Context, *GetReferenceByNameRequest) (*GetReferenceByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferenceByName not implemented")
}
func (UnimplementedReferenceServiceServer) ListGitCommitMetadataForReference(context.Context, *ListGitCommitMetadataForReferenceRequest) (*ListGitCommitMetadataForReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitCommitMetadataForReference not implemented")
}
func (UnimplementedReferenceServiceServer) mustEmbedUnimplementedReferenceServiceServer() {}

// UnsafeReferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferenceServiceServer will
// result in compilation errors.
type UnsafeReferenceServiceServer interface {
	mustEmbedUnimplementedReferenceServiceServer()
}

func RegisterReferenceServiceServer(s grpc.ServiceRegistrar, srv ReferenceServiceServer) {
	s.RegisterService(&ReferenceService_ServiceDesc, srv)
}

func _ReferenceService_GetReferenceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferenceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).GetReferenceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_GetReferenceByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).GetReferenceByName(ctx, req.(*GetReferenceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_ListGitCommitMetadataForReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitCommitMetadataForReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).ListGitCommitMetadataForReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_ListGitCommitMetadataForReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).ListGitCommitMetadataForReference(ctx, req.(*ListGitCommitMetadataForReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReferenceService_ServiceDesc is the grpc.ServiceDesc for ReferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bufman.dubbo.apache.org.registry.v1alpha1.ReferenceService",
	HandlerType: (*ReferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReferenceByName",
			Handler:    _ReferenceService_GetReferenceByName_Handler,
		},
		{
			MethodName: "ListGitCommitMetadataForReference",
			Handler:    _ReferenceService_ListGitCommitMetadataForReference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/v1alpha1/reference.proto",
}
