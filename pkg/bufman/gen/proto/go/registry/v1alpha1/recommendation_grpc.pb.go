// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: registry/v1alpha1/recommendation.proto

package registryv1alpha1

import (
	context "context"
)

import (
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RecommendationService_RecommendedRepositories_FullMethodName  = "/bufman.dubbo.apache.org.registry.v1alpha1.RecommendationService/RecommendedRepositories"
	RecommendationService_RecommendedTemplates_FullMethodName     = "/bufman.dubbo.apache.org.registry.v1alpha1.RecommendationService/RecommendedTemplates"
	RecommendationService_ListRecommendedResources_FullMethodName = "/bufman.dubbo.apache.org.registry.v1alpha1.RecommendationService/ListRecommendedResources"
	RecommendationService_SetRecommendedResources_FullMethodName  = "/bufman.dubbo.apache.org.registry.v1alpha1.RecommendationService/SetRecommendedResources"
)

// RecommendationServiceClient is the client API for RecommendationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommendationServiceClient interface {
	// RecommendedRepositories returns a list of recommended repositories.
	RecommendedRepositories(ctx context.Context, in *RecommendedRepositoriesRequest, opts ...grpc.CallOption) (*RecommendedRepositoriesResponse, error)
	// Deprecated: Do not use.
	// RecommendedTemplates returns a list of recommended templates.
	RecommendedTemplates(ctx context.Context, in *RecommendedTemplatesRequest, opts ...grpc.CallOption) (*RecommendedTemplatesResponse, error)
	// ListRecommendedResources returns a list of recommended resources.
	ListRecommendedResources(ctx context.Context, in *ListRecommendedResourcesRequest, opts ...grpc.CallOption) (*ListRecommendedResourcesResponse, error)
	// SetRecommendedResources set the list of recommended resources in the server.
	SetRecommendedResources(ctx context.Context, in *SetRecommendedResourcesRequest, opts ...grpc.CallOption) (*SetRecommendedResourcesResponse, error)
}

type recommendationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendationServiceClient(cc grpc.ClientConnInterface) RecommendationServiceClient {
	return &recommendationServiceClient{cc}
}

func (c *recommendationServiceClient) RecommendedRepositories(ctx context.Context, in *RecommendedRepositoriesRequest, opts ...grpc.CallOption) (*RecommendedRepositoriesResponse, error) {
	out := new(RecommendedRepositoriesResponse)
	err := c.cc.Invoke(ctx, RecommendationService_RecommendedRepositories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *recommendationServiceClient) RecommendedTemplates(ctx context.Context, in *RecommendedTemplatesRequest, opts ...grpc.CallOption) (*RecommendedTemplatesResponse, error) {
	out := new(RecommendedTemplatesResponse)
	err := c.cc.Invoke(ctx, RecommendationService_RecommendedTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) ListRecommendedResources(ctx context.Context, in *ListRecommendedResourcesRequest, opts ...grpc.CallOption) (*ListRecommendedResourcesResponse, error) {
	out := new(ListRecommendedResourcesResponse)
	err := c.cc.Invoke(ctx, RecommendationService_ListRecommendedResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) SetRecommendedResources(ctx context.Context, in *SetRecommendedResourcesRequest, opts ...grpc.CallOption) (*SetRecommendedResourcesResponse, error) {
	out := new(SetRecommendedResourcesResponse)
	err := c.cc.Invoke(ctx, RecommendationService_SetRecommendedResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendationServiceServer is the server API for RecommendationService service.
// All implementations must embed UnimplementedRecommendationServiceServer
// for forward compatibility
type RecommendationServiceServer interface {
	// RecommendedRepositories returns a list of recommended repositories.
	RecommendedRepositories(context.Context, *RecommendedRepositoriesRequest) (*RecommendedRepositoriesResponse, error)
	// Deprecated: Do not use.
	// RecommendedTemplates returns a list of recommended templates.
	RecommendedTemplates(context.Context, *RecommendedTemplatesRequest) (*RecommendedTemplatesResponse, error)
	// ListRecommendedResources returns a list of recommended resources.
	ListRecommendedResources(context.Context, *ListRecommendedResourcesRequest) (*ListRecommendedResourcesResponse, error)
	// SetRecommendedResources set the list of recommended resources in the server.
	SetRecommendedResources(context.Context, *SetRecommendedResourcesRequest) (*SetRecommendedResourcesResponse, error)
	mustEmbedUnimplementedRecommendationServiceServer()
}

// UnimplementedRecommendationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecommendationServiceServer struct {
}

func (UnimplementedRecommendationServiceServer) RecommendedRepositories(context.Context, *RecommendedRepositoriesRequest) (*RecommendedRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendedRepositories not implemented")
}
func (UnimplementedRecommendationServiceServer) RecommendedTemplates(context.Context, *RecommendedTemplatesRequest) (*RecommendedTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendedTemplates not implemented")
}
func (UnimplementedRecommendationServiceServer) ListRecommendedResources(context.Context, *ListRecommendedResourcesRequest) (*ListRecommendedResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecommendedResources not implemented")
}
func (UnimplementedRecommendationServiceServer) SetRecommendedResources(context.Context, *SetRecommendedResourcesRequest) (*SetRecommendedResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecommendedResources not implemented")
}
func (UnimplementedRecommendationServiceServer) mustEmbedUnimplementedRecommendationServiceServer() {}

// UnsafeRecommendationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendationServiceServer will
// result in compilation errors.
type UnsafeRecommendationServiceServer interface {
	mustEmbedUnimplementedRecommendationServiceServer()
}

func RegisterRecommendationServiceServer(s grpc.ServiceRegistrar, srv RecommendationServiceServer) {
	s.RegisterService(&RecommendationService_ServiceDesc, srv)
}

func _RecommendationService_RecommendedRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendedRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).RecommendedRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_RecommendedRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).RecommendedRepositories(ctx, req.(*RecommendedRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_RecommendedTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendedTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).RecommendedTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_RecommendedTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).RecommendedTemplates(ctx, req.(*RecommendedTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_ListRecommendedResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecommendedResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).ListRecommendedResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_ListRecommendedResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).ListRecommendedResources(ctx, req.(*ListRecommendedResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_SetRecommendedResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRecommendedResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).SetRecommendedResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_SetRecommendedResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).SetRecommendedResources(ctx, req.(*SetRecommendedResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecommendationService_ServiceDesc is the grpc.ServiceDesc for RecommendationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecommendationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bufman.dubbo.apache.org.registry.v1alpha1.RecommendationService",
	HandlerType: (*RecommendationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecommendedRepositories",
			Handler:    _RecommendationService_RecommendedRepositories_Handler,
		},
		{
			MethodName: "RecommendedTemplates",
			Handler:    _RecommendationService_RecommendedTemplates_Handler,
		},
		{
			MethodName: "ListRecommendedResources",
			Handler:    _RecommendationService_ListRecommendedResources_Handler,
		},
		{
			MethodName: "SetRecommendedResources",
			Handler:    _RecommendationService_SetRecommendedResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/v1alpha1/recommendation.proto",
}
